// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.documenttranslator;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the BatchDocumentTranslationAsyncClient type. */
@ServiceClient(builder = BatchDocumentTranslationClientBuilder.class)
public final class BatchDocumentTranslationAsyncClient {
    private final String endpoint;

    private final HttpPipeline httpPipeline;

    /**
     * Initializes an instance of BatchDocumentTranslationAsyncClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus.api.cognitive.microsoft.com).
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    BatchDocumentTranslationAsyncClient(String endpoint, HttpPipeline httpPipeline) {
        this.endpoint = endpoint;
        this.httpPipeline = httpPipeline;
    }

    /**
     * Use this API to submit a bulk (batch) translation request to the Document Translation service. Each request can
     * contain multiple documents and must contain a source and destination container for each document.
     *
     * <p>The prefix and suffix filter (if supplied) are used to filter folders. The prefix is applied to the subpath
     * after the container name.
     *
     * <p>Glossaries / Translation memory can be included in the request and are applied by the service when the
     * document is translated.
     *
     * <p>If the glossary is invalid or unreachable during translation, an error is indicated in the document status. If
     * a file with the same name already exists at the destination, it will be overwritten. The targetUrl for each
     * target language must be unique.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     inputs: [
     *         {
     *             source: {
     *                 sourceUrl: String
     *                 filter: {
     *                     prefix: String
     *                     suffix: String
     *                 }
     *                 language: String
     *                 storageSource: String(AzureBlob)
     *             }
     *             targets: [
     *                 {
     *                     targetUrl: String
     *                     category: String
     *                     language: String
     *                     glossaries: [
     *                         {
     *                             glossaryUrl: String
     *                             format: String
     *                             version: String
     *                             storageSource: String(AzureBlob)
     *                         }
     *                     ]
     *                     storageSource: String(AzureBlob)
     *                 }
     *             ]
     *             storageType: String(Folder/File)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> startTranslationWithResponse(BinaryData body, RequestOptions options) {
        String url = "{endpoint}/translator/text/batch/v1.0-preview.1/batches";
        url = url.replace("endpoint", endpoint);
        HttpRequest request = new HttpRequest(HttpMethod.POST, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        request.setBody(body.toBytes());
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline
                .send(request)
                .flatMap(
                        httpResponse ->
                                BinaryData.fromFlux(httpResponse.getBody())
                                        .map(
                                                binaryData ->
                                                        new SimpleResponse<>(
                                                                httpResponse.getRequest(),
                                                                httpResponse.getStatusCode(),
                                                                httpResponse.getHeaders(),
                                                                binaryData)));
    }

    /**
     * Returns the translation status for a specific document based on the request Id and document Id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     path: String
     *     sourcePath: String
     *     createdDateTimeUtc: OffsetDateTime
     *     lastActionDateTimeUtc: OffsetDateTime
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed)
     *     to: String
     *     error: {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh)
     *         message: String
     *         target: String
     *         innerError: {
     *             code: String
     *             message: String
     *             target: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *     }
     *     progress: float
     *     id: UUID
     *     characterCharged: Long
     * }
     * }</pre>
     *
     * @param id Format - uuid. The batch id.
     * @param documentId Format - uuid. The document id.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDocumentStatusWithResponse(
            String id, String documentId, RequestOptions options) {
        String url = "{endpoint}/translator/text/batch/v1.0-preview.1/batches/{id}/documents/{documentId}";
        url = url.replace("endpoint", endpoint);
        url = url.replace("id", id);
        url = url.replace("documentId", documentId);
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline
                .send(request)
                .flatMap(
                        httpResponse ->
                                BinaryData.fromFlux(httpResponse.getBody())
                                        .map(
                                                binaryData ->
                                                        new SimpleResponse<>(
                                                                httpResponse.getRequest(),
                                                                httpResponse.getStatusCode(),
                                                                httpResponse.getHeaders(),
                                                                binaryData)));
    }

    /**
     * Returns the status for a document translation request. The status includes the overall request status, as well as
     * the status for documents that are being translated as part of that request.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: UUID
     *     createdDateTimeUtc: OffsetDateTime
     *     lastActionDateTimeUtc: OffsetDateTime
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed)
     *     error: {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh)
     *         message: String
     *         target: String
     *         innerError: {
     *             code: String
     *             message: String
     *             target: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *     }
     *     summary: {
     *         total: int
     *         failed: int
     *         success: int
     *         inProgress: int
     *         notYetStarted: int
     *         cancelled: int
     *         totalCharacterCharged: long
     *     }
     * }
     * }</pre>
     *
     * @param id Format - uuid. The operation id.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTranslationStatusWithResponse(String id, RequestOptions options) {
        String url = "{endpoint}/translator/text/batch/v1.0-preview.1/batches/{id}";
        url = url.replace("endpoint", endpoint);
        url = url.replace("id", id);
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline
                .send(request)
                .flatMap(
                        httpResponse ->
                                BinaryData.fromFlux(httpResponse.getBody())
                                        .map(
                                                binaryData ->
                                                        new SimpleResponse<>(
                                                                httpResponse.getRequest(),
                                                                httpResponse.getStatusCode(),
                                                                httpResponse.getHeaders(),
                                                                binaryData)));
    }

    /**
     * Cancel a currently processing or queued translation. Cancel a currently processing or queued translation. A
     * translation will not be cancelled if it is already completed or failed or cancelling. A bad request will be
     * returned. All documents that have completed translation will not be cancelled and will be charged. All pending
     * documents will be cancelled if possible.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: UUID
     *     createdDateTimeUtc: OffsetDateTime
     *     lastActionDateTimeUtc: OffsetDateTime
     *     status: String(NotStarted/Running/Succeeded/Failed/Cancelled/Cancelling/ValidationFailed)
     *     error: {
     *         code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/ResourceNotFound/Unauthorized/RequestRateTooHigh)
     *         message: String
     *         target: String
     *         innerError: {
     *             code: String
     *             message: String
     *             target: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *     }
     *     summary: {
     *         total: int
     *         failed: int
     *         success: int
     *         inProgress: int
     *         notYetStarted: int
     *         cancelled: int
     *         totalCharacterCharged: long
     *     }
     * }
     * }</pre>
     *
     * @param id Format - uuid. The operation-id.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelTranslationWithResponse(String id, RequestOptions options) {
        String url = "{endpoint}/translator/text/batch/v1.0-preview.1/batches/{id}";
        url = url.replace("endpoint", endpoint);
        url = url.replace("id", id);
        HttpRequest request = new HttpRequest(HttpMethod.DELETE, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline
                .send(request)
                .flatMap(
                        httpResponse ->
                                BinaryData.fromFlux(httpResponse.getBody())
                                        .map(
                                                binaryData ->
                                                        new SimpleResponse<>(
                                                                httpResponse.getRequest(),
                                                                httpResponse.getStatusCode(),
                                                                httpResponse.getHeaders(),
                                                                binaryData)));
    }

    /**
     * The list of supported document formats supported by the Document Translation service. The list includes the
     * common file extension, as well as the content-type if using the upload API.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             format: String
     *             fileExtensions: [
     *                 String
     *             ]
     *             contentTypes: [
     *                 String
     *             ]
     *             defaultVersion: String
     *             versions: [
     *                 String
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSupportedDocumentFormatsWithResponse(RequestOptions options) {
        String url = "{endpoint}/translator/text/batch/v1.0-preview.1/documents/formats";
        url = url.replace("endpoint", endpoint);
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline
                .send(request)
                .flatMap(
                        httpResponse ->
                                BinaryData.fromFlux(httpResponse.getBody())
                                        .map(
                                                binaryData ->
                                                        new SimpleResponse<>(
                                                                httpResponse.getRequest(),
                                                                httpResponse.getStatusCode(),
                                                                httpResponse.getHeaders(),
                                                                binaryData)));
    }

    /**
     * The list of supported glossary formats supported by the Document Translation service. The list includes the
     * common file extension used.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             format: String
     *             fileExtensions: [
     *                 String
     *             ]
     *             contentTypes: [
     *                 String
     *             ]
     *             defaultVersion: String
     *             versions: [
     *                 String
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSupportedGlossaryFormatsWithResponse(RequestOptions options) {
        String url = "{endpoint}/translator/text/batch/v1.0-preview.1/glossaries/formats";
        url = url.replace("endpoint", endpoint);
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline
                .send(request)
                .flatMap(
                        httpResponse ->
                                BinaryData.fromFlux(httpResponse.getBody())
                                        .map(
                                                binaryData ->
                                                        new SimpleResponse<>(
                                                                httpResponse.getRequest(),
                                                                httpResponse.getStatusCode(),
                                                                httpResponse.getHeaders(),
                                                                binaryData)));
    }

    /**
     * Returns a list of storage sources/options supported by the Document Translation service.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         String(AzureBlob)
     *     ]
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSupportedStorageSourcesWithResponse(RequestOptions options) {
        String url = "{endpoint}/translator/text/batch/v1.0-preview.1/storagesources";
        url = url.replace("endpoint", endpoint);
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline
                .send(request)
                .flatMap(
                        httpResponse ->
                                BinaryData.fromFlux(httpResponse.getBody())
                                        .map(
                                                binaryData ->
                                                        new SimpleResponse<>(
                                                                httpResponse.getRequest(),
                                                                httpResponse.getStatusCode(),
                                                                httpResponse.getHeaders(),
                                                                binaryData)));
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invoke(String url, HttpMethod httpMethod, byte[] body, RequestOptions options) {
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline
                .send(request)
                .flatMap(
                        httpResponse ->
                                BinaryData.fromFlux(httpResponse.getBody())
                                        .map(
                                                binaryData ->
                                                        new SimpleResponse<>(
                                                                httpResponse.getRequest(),
                                                                httpResponse.getStatusCode(),
                                                                httpResponse.getHeaders(),
                                                                binaryData)));
    }
}
