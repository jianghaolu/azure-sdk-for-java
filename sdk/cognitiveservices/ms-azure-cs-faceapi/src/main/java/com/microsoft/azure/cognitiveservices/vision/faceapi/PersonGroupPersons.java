/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFacePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlPersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamPersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PersonGroupPersons.
 */
public interface PersonGroupPersons {
    /**
     * Create a new person in a specified person group.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Person object if successful.
     */
    Person create(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter);

    /**
     * Create a new person in a specified person group.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    Observable<Person> createAsync(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter);


    /**
     * Create a new person in a specified person group.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    Observable<ServiceResponse<Person>> createWithServiceResponseAsync(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter);

    /**
     * List all persons in a person group, and retrieve person information (including personId, name, userData and
     *   persistedFaceIds of registered faces of the person).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Person&gt; object if successful.
     */
    List<Person> list(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter);

    /**
     * List all persons in a person group, and retrieve person information (including personId, name, userData and
     *   persistedFaceIds of registered faces of the person).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Person&gt; object
     */
    Observable<List<Person>> listAsync(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter);


    /**
     * List all persons in a person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Person&gt; object
     */
    Observable<ServiceResponse<List<Person>>> listWithServiceResponseAsync(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter);


    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face
      *  feature in the person entry will all be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String personGroupId, UUID personId);

    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face
      *  feature in the person entry will all be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String personGroupId, UUID personId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face
      *  feature in the person entry will all be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteAsync(String personGroupId, UUID personId);

    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face
      *  feature in the person entry will all be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful..
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String personGroupId, UUID personId);


    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Person object if successful.
     */
    Person get(String personGroupId, UUID personId);

    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Person> getAsync(String personGroupId, UUID personId, final ServiceCallback<Person> serviceCallback);

    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    Observable<Person> getAsync(String personGroupId, UUID personId);

    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    Observable<ServiceResponse<Person>> getWithServiceResponseAsync(String personGroupId, UUID personId);

    /**
     * Update name or userData of a person.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter);

    /**
     * Update name or userData of a person.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateAsync(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter);


    /**
     * Update name or userData of a person.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter);


    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and
      *  persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same person will be processed
      *  sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteFace(String personGroupId, UUID personId, UUID persistedFaceId);

    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and
      *  persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same person will be processed
      *  sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and
      *  persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same person will be processed
      *  sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId);

    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and
      *  persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same person will be processed
      *  sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful..
     */
    Observable<ServiceResponse<Void>> deleteFaceWithServiceResponseAsync(String personGroupId, UUID personId, UUID persistedFaceId);


    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its
      *  belonging personGroupId).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace getFace(String personGroupId, UUID personId, UUID persistedFaceId);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its
      *  belonging personGroupId).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PersistedFace> getFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId, final ServiceCallback<PersistedFace> serviceCallback);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its
      *  belonging personGroupId).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> getFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its
      *  belonging personGroupId).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> getFaceWithServiceResponseAsync(String personGroupId, UUID personId, UUID persistedFaceId);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * Each person entry can hold up to 248 faces.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     *   different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateFace(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFacePersonGroupPersonsOptionalParameter updateFaceOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * Each person entry can hold up to 248 faces.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     *   different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFacePersonGroupPersonsOptionalParameter updateFaceOptionalParameter);


    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [PersonGroup PersonFace - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFacePersonGroupPersonsOptionalParameter updateFaceOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromUrl(String personGroupId, UUID personId, String url, AddFaceFromUrlPersonGroupPersonsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromUrlAsync(String personGroupId, UUID personId, String url, AddFaceFromUrlPersonGroupPersonsOptionalParameter addFaceFromUrlOptionalParameter);


    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [PersonGroup PersonFace - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   Each person entry can hold up to 248 faces.
     *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.
     *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [PersonGroup Person - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String personGroupId, UUID personId, String url, AddFaceFromUrlPersonGroupPersonsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromStream(String personGroupId, UUID personId, byte[] image, AddFaceFromStreamPersonGroupPersonsOptionalParameter addFaceFromStreamOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromStreamAsync(String personGroupId, UUID personId, byte[] image, AddFaceFromStreamPersonGroupPersonsOptionalParameter addFaceFromStreamOptionalParameter);


    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [PersonGroup PersonFace - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e), [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   Each person entry can hold up to 248 faces.
     *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.
     *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [PersonGroup Person - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String personGroupId, UUID personId, byte[] image, AddFaceFromStreamPersonGroupPersonsOptionalParameter addFaceFromStreamOptionalParameter);

}
