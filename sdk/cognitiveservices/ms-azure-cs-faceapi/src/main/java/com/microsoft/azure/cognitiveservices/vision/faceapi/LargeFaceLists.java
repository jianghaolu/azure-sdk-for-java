/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.GetLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListFacesOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.LargeFaceList;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.RecognitionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LargeFaceLists.
 */
public interface LargeFaceLists {
    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     *   recognitionModel.
     *   &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by
     *   [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     *   &lt;br /&gt; After creation, user should use [LargeFaceList Face -
     *   Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and
     *   [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make
     *   it ready for [Face - Find
     *   Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). No image will be
     *   stored. Only the extracted face features are stored on server until [LargeFaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) /
     *   [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face -
     *   Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this large face
     *   list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     *   explicitly specify the model you need in this parameter. New faces that are added to an existing large face
     *   list will use the recognition model that's already associated with the collection. Existing face features in
     *   a large face list can't be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [LargeFaceList-
     *   Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc). All those large face
     *   lists created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its 
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Large face list quota:
     *   * Free-tier subscription quota: 64 large face lists.
     *   * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String largeFaceListId, CreateLargeFaceListsOptionalParameter createOptionalParameter);

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     *   recognitionModel.
     *   &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by
     *   [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     *   &lt;br /&gt; After creation, user should use [LargeFaceList Face -
     *   Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and
     *   [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make
     *   it ready for [Face - Find
     *   Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). No image will be
     *   stored. Only the extracted face features are stored on server until [LargeFaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) /
     *   [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face -
     *   Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this large face
     *   list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     *   explicitly specify the model you need in this parameter. New faces that are added to an existing large face
     *   list will use the recognition model that's already associated with the collection. Existing face features in
     *   a large face list can't be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [LargeFaceList-
     *   Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc). All those large face
     *   lists created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its 
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Large face list quota:
     *   * Free-tier subscription quota: 64 large face lists.
     *   * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> createAsync(String largeFaceListId, CreateLargeFaceListsOptionalParameter createOptionalParameter);


    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) to import the faces and [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) to make it ready for [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). No image will be stored. Only the extracted face features are stored on server until [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br/&gt;'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     * 'recognition_01': The default recognition model for [LargeFaceList- Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc). All those large face lists created before 2019 March are bonded with this recognition model.
     * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     Large face list quota:
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String largeFaceListId, CreateLargeFaceListsOptionalParameter createOptionalParameter);

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LargeFaceList object if successful.
     */
    LargeFaceList get(String largeFaceListId, GetLargeFaceListsOptionalParameter getOptionalParameter);

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    Observable<LargeFaceList> getAsync(String largeFaceListId, GetLargeFaceListsOptionalParameter getOptionalParameter);


    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    Observable<ServiceResponse<LargeFaceList>> getWithServiceResponseAsync(String largeFaceListId, GetLargeFaceListsOptionalParameter getOptionalParameter);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String largeFaceListId, UpdateLargeFaceListsOptionalParameter updateOptionalParameter);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateAsync(String largeFaceListId, UpdateLargeFaceListsOptionalParameter updateOptionalParameter);


    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largeFaceListId, UpdateLargeFaceListsOptionalParameter updateOptionalParameter);


    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String largeFaceListId);

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteAsync(String largeFaceListId);

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful..
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String largeFaceListId);


    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainingStatus object if successful.
     */
    TrainingStatus getTrainingStatus(String largeFaceListId);

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrainingStatus> getTrainingStatusAsync(String largeFaceListId, final ServiceCallback<TrainingStatus> serviceCallback);

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<TrainingStatus> getTrainingStatusAsync(String largeFaceListId);

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<ServiceResponse<TrainingStatus>> getTrainingStatusWithServiceResponseAsync(String largeFaceListId);

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel.
     *   &lt;br /&gt;
     *   To get face information inside largeFaceList use [LargeFaceList Face -
     Get](/doc*   s/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     *   * Large face lists are stored in alphabetical order of largeFaceListId.
     *   * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have
     *   larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 large person lists: "list1", ..., "list5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     *   &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     *   &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LargeFaceList&gt; object if successful.
     */
    List<LargeFaceList> list(ListLargeFaceListsOptionalParameter listOptionalParameter);

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel.
     *   &lt;br /&gt;
     *   To get face information inside largeFaceList use [LargeFaceList Face -
     Get](/doc*   s/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     *   * Large face lists are stored in alphabetical order of largeFaceListId.
     *   * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have
     *   larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 large person lists: "list1", ..., "list5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     *   &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     *   &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    Observable<List<LargeFaceList>> listAsync(ListLargeFaceListsOptionalParameter listOptionalParameter);


    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    Observable<ServiceResponse<List<LargeFaceList>>> listWithServiceResponseAsync(ListLargeFaceListsOptionalParameter listOptionalParameter);


    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void train(String largeFaceListId);

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> trainAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback);

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> trainAsync(String largeFaceListId);

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful..
     */
    Observable<ServiceResponse<Void>> trainWithServiceResponseAsync(String largeFaceListId);


    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same large face list are
      *  processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteFace(String largeFaceListId, UUID persistedFaceId);

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same large face list are
      *  processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same large face list are
      *  processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteFaceAsync(String largeFaceListId, UUID persistedFaceId);

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same large face list are
      *  processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful..
     */
    Observable<ServiceResponse<Void>> deleteFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId);


    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging
      *  largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace getFace(String largeFaceListId, UUID persistedFaceId);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging
      *  largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PersistedFace> getFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<PersistedFace> serviceCallback);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging
      *  largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> getFaceAsync(String largeFaceListId, UUID persistedFaceId);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging
      *  largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> getFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateFace(String largeFaceListId, UUID persistedFaceId, UpdateFaceLargeFaceListsOptionalParameter updateFaceOptionalParameter);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, UpdateFaceLargeFaceListsOptionalParameter updateFaceOptionalParameter);


    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId, UpdateFaceLargeFaceListsOptionalParameter updateFaceOptionalParameter);

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromUrl(String largeFaceListId, String url, AddFaceFromUrlLargeFaceListsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, AddFaceFromUrlLargeFaceListsOptionalParameter addFaceFromUrlOptionalParameter);


    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String largeFaceListId, String url, AddFaceFromUrlLargeFaceListsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds
     *   of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param listFacesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PersistedFace&gt; object if successful.
     */
    List<PersistedFace> listFaces(String largeFaceListId, ListFacesOptionalParameter listFacesOptionalParameter);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds
     *   of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param listFacesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    Observable<List<PersistedFace>> listFacesAsync(String largeFaceListId, ListFacesOptionalParameter listFacesOptionalParameter);


    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param listFacesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    Observable<ServiceResponse<List<PersistedFace>>> listFacesWithServiceResponseAsync(String largeFaceListId, ListFacesOptionalParameter listFacesOptionalParameter);

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromStream(String largeFaceListId, byte[] image, AddFaceFromStreamLargeFaceListsOptionalParameter addFaceFromStreamOptionalParameter);

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, AddFaceFromStreamLargeFaceListsOptionalParameter addFaceFromStreamOptionalParameter);


    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) or [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String largeFaceListId, byte[] image, AddFaceFromStreamLargeFaceListsOptionalParameter addFaceFromStreamOptionalParameter);

}
