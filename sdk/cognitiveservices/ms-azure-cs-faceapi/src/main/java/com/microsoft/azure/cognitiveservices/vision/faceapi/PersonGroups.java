/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.GetPersonGroupsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersonGroup;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.RecognitionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PersonGroups.
 */
public interface PersonGroups {
    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     *   &lt;br /&gt; A person group is the container of the uploaded person data, including
     *   face recognition features.
     *   &lt;br /&gt; After creation, use [PersonGroup Person -
     *   Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the
     *   group, and then call [PersonGroup -
     *   Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready
     *   for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     *   &lt;br /&gt; No image will be stored. Only the person's extracted face features and
     *   userData will be stored on server until [PersonGroup Person -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this person
     *   group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     *   explicitly specify the model you need in this parameter. New faces that are added to an existing person
     *   group will use the recognition model that's already associated with the collection. Existing face features
     *   in a person group can't be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [PersonGroup -
     *   Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). All those person
     *   groups created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its 
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Person group quota:
     *   * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     *   * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     *   * to handle larger scale face identification problem, please consider using
     *   [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter);

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     *   &lt;br /&gt; A person group is the container of the uploaded person data, including
     *   face recognition features.
     *   &lt;br /&gt; After creation, use [PersonGroup Person -
     *   Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the
     *   group, and then call [PersonGroup -
     *   Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready
     *   for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     *   &lt;br /&gt; No image will be stored. Only the person's extracted face features and
     *   userData will be stored on server until [PersonGroup Person -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this person
     *   group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     *   explicitly specify the model you need in this parameter. New faces that are added to an existing person
     *   group will use the recognition model that's already associated with the collection. Existing face features
     *   in a person group can't be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [PersonGroup -
     *   Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). All those person
     *   groups created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its 
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Person group quota:
     *   * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     *   * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     *   * to handle larger scale face identification problem, please consider using
     *   [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> createAsync(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter);


    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     &lt;br /&gt; A person group is the container of the uploaded person data, including face recognition features.
     &lt;br /&gt; After creation, use [PersonGroup Person - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the group, and then call [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt; No image will be stored. Only the person's extracted face features and userData will be stored on server until [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing person group will use the recognition model that's already associated with the collection. Existing face features in a person group can't be updated to features extracted by another version of recognition model.
     * 'recognition_01': The default recognition model for [PersonGroup - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). All those person groups created before 2019 March are bonded with this recognition model.
     * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     Person group quota:
     * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     * to handle larger scale face identification problem, please consider using [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter);


    /**
     * Delete an existing person group. Persisted face features of all people in the person group will
      *  also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String personGroupId);

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will
      *  also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String personGroupId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will
      *  also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteAsync(String personGroupId);

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will
      *  also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful..
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String personGroupId);

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup,
     *   use [PersonGroup Person -
     *   List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersonGroup object if successful.
     */
    PersonGroup get(String personGroupId, GetPersonGroupsOptionalParameter getOptionalParameter);

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup,
     *   use [PersonGroup Person -
     *   List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersonGroup object
     */
    Observable<PersonGroup> getAsync(String personGroupId, GetPersonGroupsOptionalParameter getOptionalParameter);


    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use [PersonGroup Person - List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersonGroup object
     */
    Observable<ServiceResponse<PersonGroup>> getWithServiceResponseAsync(String personGroupId, GetPersonGroupsOptionalParameter getOptionalParameter);

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request
     *   body will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter);

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request
     *   body will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateAsync(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter);


    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter);


    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainingStatus object if successful.
     */
    TrainingStatus getTrainingStatus(String personGroupId);

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrainingStatus> getTrainingStatusAsync(String personGroupId, final ServiceCallback<TrainingStatus> serviceCallback);

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<TrainingStatus> getTrainingStatusAsync(String personGroupId);

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<ServiceResponse<TrainingStatus>> getTrainingStatusWithServiceResponseAsync(String personGroupId);

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt;
     *   * Person groups are stored in alphabetical order of personGroupId.
     *   * "start" parameter (string, optional) is a user-provided personGroupId value that returned entries have
     *   larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 person groups: "group1", ..., "group5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     *   &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     *   &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PersonGroup&gt; object if successful.
     */
    List<PersonGroup> list(ListPersonGroupsOptionalParameter listOptionalParameter);

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt;
     *   * Person groups are stored in alphabetical order of personGroupId.
     *   * "start" parameter (string, optional) is a user-provided personGroupId value that returned entries have
     *   larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 person groups: "group1", ..., "group5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     *   &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     *   &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersonGroup&gt; object
     */
    Observable<List<PersonGroup>> listAsync(ListPersonGroupsOptionalParameter listOptionalParameter);


    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt;
     * Person groups are stored in alphabetical order of personGroupId.
     * "start" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 person groups: "group1", ..., "group5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersonGroup&gt; object
     */
    Observable<ServiceResponse<List<PersonGroup>>> listWithServiceResponseAsync(ListPersonGroupsOptionalParameter listOptionalParameter);


    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void train(String personGroupId);

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> trainAsync(String personGroupId, final ServiceCallback<Void> serviceCallback);

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> trainAsync(String personGroupId);

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful..
     */
    Observable<ServiceResponse<Void>> trainWithServiceResponseAsync(String personGroupId);

}
