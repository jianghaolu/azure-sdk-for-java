/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.GetFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.RecognitionModel;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in FaceLists.
 */
public interface FaceLists {
    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel.
     *   Up to 64 face lists are allowed in one subscription.
     *   &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and used by [Face -
     *   Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     *   &lt;br /&gt; After creation, user should use [FaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250) to import the faces. No
     *   image will be stored. Only the extracted face features are stored on server until [FaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) /
     *   [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face -
     *   Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     *   &lt;br /&gt; Please consider
     *   [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) when the face
     *   number is large. It can support up to 1,000,000 faces.
     *   &lt;br /&gt;'recognitionModel' should be specified to associate with this face list.
     *   The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
     *   specify the model you need in this parameter. New faces that are added to an existing face list will use the
     *   recognition model that's already associated with the collection. Existing face features in a face list can't
     *   be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [FaceList-
     *   Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b). All those face lists
     *   created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its 
     *   overall accuracy is improved compared with 'recognition_01'.
     *
     * @param faceListId Id referencing a particular face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter);

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel.
     *   Up to 64 face lists are allowed in one subscription.
     *   &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and used by [Face -
     *   Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     *   &lt;br /&gt; After creation, user should use [FaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250) to import the faces. No
     *   image will be stored. Only the extracted face features are stored on server until [FaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) /
     *   [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face -
     *   Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     *   &lt;br /&gt; Please consider
     *   [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) when the face
     *   number is large. It can support up to 1,000,000 faces.
     *   &lt;br /&gt;'recognitionModel' should be specified to associate with this face list.
     *   The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
     *   specify the model you need in this parameter. New faces that are added to an existing face list will use the
     *   recognition model that's already associated with the collection. Existing face features in a face list can't
     *   be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [FaceList-
     *   Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b). All those face lists
     *   created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its 
     *   overall accuracy is improved compared with 'recognition_01'.
     *
     * @param faceListId Id referencing a particular face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> createAsync(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter);


    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to 64 face lists are allowed in one subscription.
     &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and used by [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
     &lt;br /&gt; After creation, user should use [FaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250) to import the faces. No image will be stored. Only the extracted face features are stored on server until [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) / [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) and [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     &lt;br /&gt; Please consider [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) when the face number is large. It can support up to 1,000,000 faces.
     &lt;br /&gt;'recognitionModel' should be specified to associate with this face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing face list will use the recognition model that's already associated with the collection. Existing face features in a face list can't be updated to features extracted by another version of recognition model.
     * 'recognition_01': The default recognition model for [FaceList- Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b). All those face lists created before 2019 March are bonded with this recognition model.
     * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     *
     * @param faceListId Id referencing a particular face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter);

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FaceList object if successful.
     */
    FaceList get(String faceListId, GetFaceListsOptionalParameter getOptionalParameter);

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FaceList object
     */
    Observable<FaceList> getAsync(String faceListId, GetFaceListsOptionalParameter getOptionalParameter);


    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FaceList object
     */
    Observable<ServiceResponse<FaceList>> getWithServiceResponseAsync(String faceListId, GetFaceListsOptionalParameter getOptionalParameter);

    /**
     * Update information of a face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter);

    /**
     * Update information of a face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateAsync(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter);


    /**
     * Update information of a face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter);


    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String faceListId);

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String faceListId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteAsync(String faceListId);

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful..
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String faceListId);

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt;
     *   To get face information inside faceList use [FaceList -
     *   Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c).
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;FaceList&gt; object if successful.
     */
    List<FaceList> list(ListFaceListsOptionalParameter listOptionalParameter);

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt;
     *   To get face information inside faceList use [FaceList -
     *   Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c).
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FaceList&gt; object
     */
    Observable<List<FaceList>> listAsync(ListFaceListsOptionalParameter listOptionalParameter);


    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside faceList use [FaceList - Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c).
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FaceList&gt; object
     */
    Observable<ServiceResponse<List<FaceList>>> listWithServiceResponseAsync(ListFaceListsOptionalParameter listOptionalParameter);


    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same face list are processed
      *  sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteFace(String faceListId, UUID persistedFaceId);

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same face list are processed
      *  sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses. * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFaceAsync(String faceListId, UUID persistedFaceId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same face list are processed
      *  sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteFaceAsync(String faceListId, UUID persistedFaceId);

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same face list are processed
      *  sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful..
     */
    Observable<ServiceResponse<Void>> deleteFaceWithServiceResponseAsync(String faceListId, UUID persistedFaceId);

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromUrl(String faceListId, String url, AddFaceFromUrlFaceListsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromUrlAsync(String faceListId, String url, AddFaceFromUrlFaceListsOptionalParameter addFaceFromUrlOptionalParameter);


    /**
     * Add a face to a specified face list, up to 1,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     * Higher face image quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [FaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String faceListId, String url, AddFaceFromUrlFaceListsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromStream(String faceListId, byte[] image, AddFaceFromStreamFaceListsOptionalParameter addFaceFromStreamOptionalParameter);

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList -
     *   Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     model](ht*   tps://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250). Recommend for near
     *   frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     *   wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromStreamAsync(String faceListId, byte[] image, AddFaceFromStreamFaceListsOptionalParameter addFaceFromStreamOptionalParameter);


    /**
     * Add a face to a specified face list, up to 1,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251) or [FaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
     * Higher face image quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [FaceList - Add Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String faceListId, byte[] image, AddFaceFromStreamFaceListsOptionalParameter addFaceFromStreamOptionalParameter);

}
