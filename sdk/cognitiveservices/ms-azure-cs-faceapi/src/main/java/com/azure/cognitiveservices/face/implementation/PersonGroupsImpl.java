// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face.implementation;

import com.azure.cognitiveservices.face.PersonGroups;
import com.azure.cognitiveservices.face.models.APIErrorException;
import com.azure.cognitiveservices.face.models.MetaDataContract;
import com.azure.cognitiveservices.face.models.NameAndUserDataContract;
import com.azure.cognitiveservices.face.models.PersonGroup;
import com.azure.cognitiveservices.face.models.RecognitionModel;
import com.azure.cognitiveservices.face.models.TrainingStatus;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.RestProxy;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * PersonGroups.
 */
public final class PersonGroupsImpl implements PersonGroups {
    /**
     * The proxy service used to perform REST calls.
     */
    private PersonGroupsService service;

    /**
     * The service client containing this operation class.
     */
    private FaceClientImpl client;

    /**
     * Initializes an instance of PersonGroupsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PersonGroupsImpl(FaceClientImpl client) {
        this.service = RestProxy.create(PersonGroupsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for FaceClientPersonGroups to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/face/v1.0")
    @ServiceInterface(name = "FaceClientPersonGroups")
    private interface PersonGroupsService {
        @Put("persongroups/{personGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<VoidResponse> create(@PathParam("personGroupId") String personGroupId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") MetaDataContract body);

        @Delete("persongroups/{personGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<VoidResponse> delete(@PathParam("personGroupId") String personGroupId, @HostParam("Endpoint") String endpoint);

        @Get("persongroups/{personGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<PersonGroup>> get(@PathParam("personGroupId") String personGroupId, @HostParam("Endpoint") String endpoint, @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel);

        @Patch("persongroups/{personGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<VoidResponse> update(@PathParam("personGroupId") String personGroupId, @HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") NameAndUserDataContract body);

        @Get("persongroups/{personGroupId}/training")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<TrainingStatus>> getTrainingStatus(@PathParam("personGroupId") String personGroupId, @HostParam("Endpoint") String endpoint);

        @Get("persongroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<SimpleResponse<List<PersonGroup>>> list(@HostParam("Endpoint") String endpoint, @QueryParam("start") String start, @QueryParam("top") Integer top, @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel);

        @Post("persongroups/{personGroupId}/train")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<VoidResponse> train(@PathParam("personGroupId") String personGroupId, @HostParam("Endpoint") String endpoint);
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     * &lt;br /&gt; A person group is the container of the uploaded person data, including face recognition features.
     * &lt;br /&gt; After creation, use [PersonGroup Person - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the group, and then call [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt; No image will be stored. Only the person's extracted face features and userData will be stored on server until [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing person group will use the recognition model that's already associated with the collection. Existing face features in a person group can't be updated to features extracted by another version of recognition model.
     * * 'recognition_01': The default recognition model for [PersonGroup - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). All those person groups created before 2019 March are bonded with this recognition model.
     * * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     *
     * Person group quota:
     * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     * * to handle larger scale face identification problem, please consider using [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> createWithRestResponseAsync(String personGroupId) {
        MetaDataContract body = new MetaDataContract();
        body.setName(null);
        body.setUserData(null);
        body.setRecognitionModel(null);
        return service.create(personGroupId, this.client.getEndpoint(), body);
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     * &lt;br /&gt; A person group is the container of the uploaded person data, including face recognition features.
     * &lt;br /&gt; After creation, use [PersonGroup Person - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the group, and then call [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt; No image will be stored. Only the person's extracted face features and userData will be stored on server until [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing person group will use the recognition model that's already associated with the collection. Existing face features in a person group can't be updated to features extracted by another version of recognition model.
     * * 'recognition_01': The default recognition model for [PersonGroup - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). All those person groups created before 2019 March are bonded with this recognition model.
     * * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     *
     * Person group quota:
     * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     * * to handle larger scale face identification problem, please consider using [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createAsync(String personGroupId) {
        return createWithRestResponseAsync(personGroupId)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     * &lt;br /&gt; A person group is the container of the uploaded person data, including face recognition features.
     * &lt;br /&gt; After creation, use [PersonGroup Person - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the group, and then call [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt; No image will be stored. Only the person's extracted face features and userData will be stored on server until [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing person group will use the recognition model that's already associated with the collection. Existing face features in a person group can't be updated to features extracted by another version of recognition model.
     * * 'recognition_01': The default recognition model for [PersonGroup - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). All those person groups created before 2019 March are bonded with this recognition model.
     * * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     *
     * Person group quota:
     * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     * * to handle larger scale face identification problem, please consider using [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> createWithRestResponseAsync(String personGroupId, String name, String userData, RecognitionModel recognitionModel) {
        MetaDataContract body = new MetaDataContract();
        body.setName(name);
        body.setUserData(userData);
        body.setRecognitionModel(recognitionModel);
        return service.create(personGroupId, this.client.getEndpoint(), body);
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.
     * &lt;br /&gt; A person group is the container of the uploaded person data, including face recognition features.
     * &lt;br /&gt; After creation, use [PersonGroup Person - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) to add persons into the group, and then call [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) to get this group ready for [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
     * &lt;br /&gt; No image will be stored. Only the person's extracted face features and userData will be stored on server until [PersonGroup Person - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d) or [PersonGroup - Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing person group will use the recognition model that's already associated with the collection. Existing face features in a person group can't be updated to features extracted by another version of recognition model.
     * * 'recognition_01': The default recognition model for [PersonGroup - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244). All those person groups created before 2019 March are bonded with this recognition model.
     * * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     *
     * Person group quota:
     * * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.
     * * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.
     * * to handle larger scale face identification problem, please consider using [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createAsync(String personGroupId, String name, String userData, RecognitionModel recognitionModel) {
        return createWithRestResponseAsync(personGroupId, name, userData, recognitionModel)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> deleteWithRestResponseAsync(String personGroupId) {
        return service.delete(personGroupId, this.client.getEndpoint());
    }

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String personGroupId) {
        return deleteWithRestResponseAsync(personGroupId)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use [PersonGroup Person - List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PersonGroup>> getWithRestResponseAsync(String personGroupId) {
        final Boolean returnRecognitionModel = false;
        return service.get(personGroupId, this.client.getEndpoint(), returnRecognitionModel);
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use [PersonGroup Person - List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersonGroup> getAsync(String personGroupId) {
        return getWithRestResponseAsync(personGroupId)
            .flatMap((SimpleResponse<PersonGroup> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use [PersonGroup Person - List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PersonGroup>> getWithRestResponseAsync(String personGroupId, Boolean returnRecognitionModel) {
        return service.get(personGroupId, this.client.getEndpoint(), returnRecognitionModel);
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use [PersonGroup Person - List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersonGroup> getAsync(String personGroupId, Boolean returnRecognitionModel) {
        return getWithRestResponseAsync(personGroupId, returnRecognitionModel)
            .flatMap((SimpleResponse<PersonGroup> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> updateWithRestResponseAsync(String personGroupId) {
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.setName(null);
        body.setUserData(null);
        return service.update(personGroupId, this.client.getEndpoint(), body);
    }

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAsync(String personGroupId) {
        return updateWithRestResponseAsync(personGroupId)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> updateWithRestResponseAsync(String personGroupId, String name, String userData) {
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.setName(name);
        body.setUserData(userData);
        return service.update(personGroupId, this.client.getEndpoint(), body);
    }

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAsync(String personGroupId, String name, String userData) {
        return updateWithRestResponseAsync(personGroupId, name, userData)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TrainingStatus>> getTrainingStatusWithRestResponseAsync(String personGroupId) {
        return service.getTrainingStatus(personGroupId, this.client.getEndpoint());
    }

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrainingStatus> getTrainingStatusAsync(String personGroupId) {
        return getTrainingStatusWithRestResponseAsync(personGroupId)
            .flatMap((SimpleResponse<TrainingStatus> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt;
     * * Person groups are stored in alphabetical order of personGroupId.
     * * "start" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 person groups: "group1", ..., "group5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     * &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     * &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<PersonGroup>>> listWithRestResponseAsync() {
        final String start = null;
        final Integer top = 1000;
        final Boolean returnRecognitionModel = false;
        return service.list(this.client.getEndpoint(), start, top, returnRecognitionModel);
    }

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt;
     * * Person groups are stored in alphabetical order of personGroupId.
     * * "start" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 person groups: "group1", ..., "group5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     * &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     * &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<PersonGroup>> listAsync() {
        return listWithRestResponseAsync()
            .flatMap((SimpleResponse<List<PersonGroup>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt;
     * * Person groups are stored in alphabetical order of personGroupId.
     * * "start" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 person groups: "group1", ..., "group5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     * &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     * &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param start List person groups from the least personGroupId greater than the "start".
     * @param top The number of person groups to list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<PersonGroup>>> listWithRestResponseAsync(String start, Integer top, Boolean returnRecognitionModel) {
        return service.list(this.client.getEndpoint(), start, top, returnRecognitionModel);
    }

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt;
     * * Person groups are stored in alphabetical order of personGroupId.
     * * "start" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     * &lt;br /&gt;
     * For example, total 5 person groups: "group1", ..., "group5".
     * &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     * &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     * &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param start List person groups from the least personGroupId greater than the "start".
     * @param top The number of person groups to list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<PersonGroup>> listAsync(String start, Integer top, Boolean returnRecognitionModel) {
        return listWithRestResponseAsync(start, top, returnRecognitionModel)
            .flatMap((SimpleResponse<List<PersonGroup>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> trainWithRestResponseAsync(String personGroupId) {
        return service.train(personGroupId, this.client.getEndpoint());
    }

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> trainAsync(String personGroupId) {
        return trainWithRestResponseAsync(personGroupId)
            .flatMap((VoidResponse res) -> Mono.empty());
    }
}
