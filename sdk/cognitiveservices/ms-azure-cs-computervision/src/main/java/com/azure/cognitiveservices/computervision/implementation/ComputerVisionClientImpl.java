// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.computervision.implementation;

import com.azure.cognitiveservices.computervision.ComputerVisionClient;
import com.azure.cognitiveservices.computervision.models.AreaOfInterestResult;
import com.azure.cognitiveservices.computervision.models.BatchReadFileInStreamResponse;
import com.azure.cognitiveservices.computervision.models.BatchReadFileResponse;
import com.azure.cognitiveservices.computervision.models.ComputerVisionErrorException;
import com.azure.cognitiveservices.computervision.models.DescriptionExclude;
import com.azure.cognitiveservices.computervision.models.Details;
import com.azure.cognitiveservices.computervision.models.DetectResult;
import com.azure.cognitiveservices.computervision.models.DomainModelResults;
import com.azure.cognitiveservices.computervision.models.ImageAnalysis;
import com.azure.cognitiveservices.computervision.models.ImageDescription;
import com.azure.cognitiveservices.computervision.models.ImageUrl;
import com.azure.cognitiveservices.computervision.models.ListModelsResult;
import com.azure.cognitiveservices.computervision.models.OcrLanguages;
import com.azure.cognitiveservices.computervision.models.OcrResult;
import com.azure.cognitiveservices.computervision.models.ReadOperationResult;
import com.azure.cognitiveservices.computervision.models.RecognizeTextInStreamResponse;
import com.azure.cognitiveservices.computervision.models.RecognizeTextResponse;
import com.azure.cognitiveservices.computervision.models.TagResult;
import com.azure.cognitiveservices.computervision.models.TextOperationResult;
import com.azure.cognitiveservices.computervision.models.TextRecognitionMode;
import com.azure.cognitiveservices.computervision.models.VisualFeatureTypes;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.implementation.CollectionFormat;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.serializer.jackson.JacksonAdapter;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.nio.ByteBuffer;
import java.util.List;

/**
 * Initializes a new instance of the ComputerVisionClient type.
 */
public final class ComputerVisionClientImpl implements ComputerVisionClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private ComputerVisionClientService service;

    /**
     * Supported Cognitive Services endpoints.
     */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints.
     *
     * @param endpoint the endpoint value.
     */
    ComputerVisionClientImpl setEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of ComputerVisionClient client.
     */
    public ComputerVisionClientImpl() {
        this(RestProxy.createDefaultPipeline());
    }

    /**
     * Initializes an instance of ComputerVisionClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public ComputerVisionClientImpl(HttpPipeline httpPipeline) {
        this.httpPipeline = httpPipeline;
        this.service = RestProxy.create(ComputerVisionClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for ComputerVisionClient to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/vision/v2.1")
    @ServiceInterface(name = "ComputerVisionClient")
    private interface ComputerVisionClientService {
        @Post("analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ImageAnalysis>> analyzeImage(@HostParam("Endpoint") String endpoint, @QueryParam("visualFeatures") String visualFeatures, @QueryParam("details") String details, @QueryParam("language") String language, @QueryParam("descriptionExclude") String descriptionExclude1, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Post("describe")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ImageDescription>> describeImage(@HostParam("Endpoint") String endpoint, @QueryParam("maxCandidates") Integer maxCandidates, @QueryParam("language") String language, @QueryParam("descriptionExclude") String descriptionExclude1, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Post("detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<DetectResult>> detectObjects(@HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Get("models")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ListModelsResult>> listModels(@HostParam("Endpoint") String endpoint);

        @Post("models/{model}/analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomain(@PathParam("model") String model, @HostParam("Endpoint") String endpoint, @QueryParam("language") String language, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Post("ocr")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<OcrResult>> recognizePrintedText(@HostParam("Endpoint") String endpoint, @QueryParam("detectOrientation") boolean detectOrientation, @QueryParam("language") OcrLanguages language, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Post("tag")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<TagResult>> tagImage(@HostParam("Endpoint") String endpoint, @QueryParam("language") String language, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Post("generateThumbnail")
        @ExpectedResponses({200})
        Mono<StreamResponse> generateThumbnail(@HostParam("Endpoint") String endpoint, @QueryParam("width") int width, @QueryParam("height") int height, @QueryParam("smartCropping") Boolean smartCropping, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Post("areaOfInterest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<AreaOfInterestResult>> getAreaOfInterest(@HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Post("recognizeText")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<RecognizeTextResponse> recognizeText(@HostParam("Endpoint") String endpoint, @QueryParam("mode") TextRecognitionMode mode, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Get("textOperations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<TextOperationResult>> getTextOperationResult(@PathParam("operationId") String operationId, @HostParam("Endpoint") String endpoint);

        @Post("read/core/asyncBatchAnalyze")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<BatchReadFileResponse> batchReadFile(@HostParam("Endpoint") String endpoint, @BodyParam("application/json; charset=utf-8") ImageUrl imageUrl);

        @Get("read/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ReadOperationResult>> getReadOperationResult(@PathParam("operationId") String operationId, @HostParam("Endpoint") String endpoint);

        @Post("analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ImageAnalysis>> analyzeImageInStream(@HostParam("Endpoint") String endpoint, @QueryParam("visualFeatures") String visualFeatures, @QueryParam("details") String details, @QueryParam("language") String language, @QueryParam("descriptionExclude") String descriptionExclude1, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);

        @Post("areaOfInterest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<AreaOfInterestResult>> getAreaOfInterestInStream(@HostParam("Endpoint") String endpoint, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);

        @Post("describe")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ImageDescription>> describeImageInStream(@HostParam("Endpoint") String endpoint, @QueryParam("maxCandidates") Integer maxCandidates, @QueryParam("language") String language, @QueryParam("descriptionExclude") String descriptionExclude1, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);

        @Post("detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<DetectResult>> detectObjectsInStream(@HostParam("Endpoint") String endpoint, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);

        @Post("generateThumbnail")
        @ExpectedResponses({200})
        Mono<StreamResponse> generateThumbnailInStream(@HostParam("Endpoint") String endpoint, @QueryParam("width") int width, @QueryParam("height") int height, @QueryParam("smartCropping") Boolean smartCropping, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);

        @Post("models/{model}/analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomainInStream(@PathParam("model") String model, @HostParam("Endpoint") String endpoint, @QueryParam("language") String language, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);

        @Post("ocr")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<OcrResult>> recognizePrintedTextInStream(@HostParam("Endpoint") String endpoint, @QueryParam("detectOrientation") boolean detectOrientation, @QueryParam("language") OcrLanguages language, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);

        @Post("tag")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<TagResult>> tagImageInStream(@HostParam("Endpoint") String endpoint, @QueryParam("language") String language, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);

        @Post("recognizeText")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<RecognizeTextInStreamResponse> recognizeTextInStream(@HostParam("Endpoint") String endpoint, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @QueryParam("mode") TextRecognitionMode mode);

        @Post("read/core/asyncBatchAnalyze")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<BatchReadFileInStreamResponse> batchReadFileInStream(@HostParam("Endpoint") String endpoint, @HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> image);
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageAnalysis>> analyzeImageWithRestResponseAsync(String url) {
        final String language = "en";
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        String visualFeaturesConverted = null;
        String detailsConverted = null;
        String descriptionExcludeConverted = null;
        return service.analyzeImage(this.getEndpoint(), visualFeaturesConverted, detailsConverted, language, descriptionExcludeConverted, imageUrl);
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysis> analyzeImageAsync(String url) {
        return analyzeImageWithRestResponseAsync(url)
            .flatMap((SimpleResponse<ImageAnalysis> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param visualFeatures A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&amp;white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English.
     * @param details A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @param descriptionExclude Turn off specified domain models when generating the description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageAnalysis>> analyzeImageWithRestResponseAsync(String url, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        String visualFeaturesConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(visualFeatures, CollectionFormat.CSV);
        String detailsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(details, CollectionFormat.CSV);
        String descriptionExcludeConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(descriptionExclude, CollectionFormat.CSV);
        return service.analyzeImage(this.getEndpoint(), visualFeaturesConverted, detailsConverted, language, descriptionExcludeConverted, imageUrl);
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param visualFeatures A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&amp;white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English.
     * @param details A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @param descriptionExclude Turn off specified domain models when generating the description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysis> analyzeImageAsync(String url, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude) {
        return analyzeImageWithRestResponseAsync(url, visualFeatures, details, language, descriptionExclude)
            .flatMap((SimpleResponse<ImageAnalysis> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageDescription>> describeImageWithRestResponseAsync(String url) {
        final Integer maxCandidates = 1;
        final String language = "en";
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        String descriptionExcludeConverted = null;
        return service.describeImage(this.getEndpoint(), maxCandidates, language, descriptionExcludeConverted, imageUrl);
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageDescription> describeImageAsync(String url) {
        return describeImageWithRestResponseAsync(url)
            .flatMap((SimpleResponse<ImageDescription> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param maxCandidates Maximum number of candidate descriptions to be returned.  The default is 1.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @param descriptionExclude Turn off specified domain models when generating the description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageDescription>> describeImageWithRestResponseAsync(String url, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        String descriptionExcludeConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(descriptionExclude, CollectionFormat.CSV);
        return service.describeImage(this.getEndpoint(), maxCandidates, language, descriptionExcludeConverted, imageUrl);
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param maxCandidates Maximum number of candidate descriptions to be returned.  The default is 1.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @param descriptionExclude Turn off specified domain models when generating the description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageDescription> describeImageAsync(String url, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude) {
        return describeImageWithRestResponseAsync(url, maxCandidates, language, descriptionExclude)
            .flatMap((SimpleResponse<ImageDescription> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Performs object detection on the specified image.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DetectResult>> detectObjectsWithRestResponseAsync(String url) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.detectObjects(this.getEndpoint(), imageUrl);
    }

    /**
     * Performs object detection on the specified image.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectResult> detectObjectsAsync(String url) {
        return detectObjectsWithRestResponseAsync(url)
            .flatMap((SimpleResponse<DetectResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ListModelsResult>> listModelsWithRestResponseAsync() {
        return service.listModels(this.getEndpoint());
    }

    /**
     * This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListModelsResult> listModelsAsync() {
        return listModelsWithRestResponseAsync()
            .flatMap((SimpleResponse<ListModelsResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomainWithRestResponseAsync(String model, String url) {
        final String language = "en";
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.analyzeImageByDomain(model, this.getEndpoint(), language, imageUrl);
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DomainModelResults> analyzeImageByDomainAsync(String model, String url) {
        return analyzeImageByDomainWithRestResponseAsync(model, url)
            .flatMap((SimpleResponse<DomainModelResults> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param url Publicly reachable URL of an image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomainWithRestResponseAsync(String model, String url, String language) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.analyzeImageByDomain(model, this.getEndpoint(), language, imageUrl);
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param url Publicly reachable URL of an image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DomainModelResults> analyzeImageByDomainAsync(String model, String url, String language) {
        return analyzeImageByDomainWithRestResponseAsync(model, url, language)
            .flatMap((SimpleResponse<DomainModelResults> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OcrResult>> recognizePrintedTextWithRestResponseAsync(boolean detectOrientation, String url) {
        final OcrLanguages language = OcrLanguages.UNK;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.recognizePrintedText(this.getEndpoint(), detectOrientation, language, imageUrl);
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OcrResult> recognizePrintedTextAsync(boolean detectOrientation, String url) {
        return recognizePrintedTextWithRestResponseAsync(detectOrientation, url)
            .flatMap((SimpleResponse<OcrResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param url Publicly reachable URL of an image.
     * @param language The BCP-47 language code of the text to be detected in the image. The default value is 'unk'. Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OcrResult>> recognizePrintedTextWithRestResponseAsync(boolean detectOrientation, String url, OcrLanguages language) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.recognizePrintedText(this.getEndpoint(), detectOrientation, language, imageUrl);
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param url Publicly reachable URL of an image.
     * @param language The BCP-47 language code of the text to be detected in the image. The default value is 'unk'. Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OcrResult> recognizePrintedTextAsync(boolean detectOrientation, String url, OcrLanguages language) {
        return recognizePrintedTextWithRestResponseAsync(detectOrientation, url, language)
            .flatMap((SimpleResponse<OcrResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TagResult>> tagImageWithRestResponseAsync(String url) {
        final String language = "en";
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.tagImage(this.getEndpoint(), language, imageUrl);
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagResult> tagImageAsync(String url) {
        return tagImageWithRestResponseAsync(url)
            .flatMap((SimpleResponse<TagResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TagResult>> tagImageWithRestResponseAsync(String url, String language) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.tagImage(this.getEndpoint(), language, imageUrl);
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagResult> tagImageAsync(String url, String language) {
        return tagImageWithRestResponseAsync(url, language)
            .flatMap((SimpleResponse<TagResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> generateThumbnailWithRestResponseAsync(int width, int height, String url) {
        final Boolean smartCropping = false;
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.generateThumbnail(this.getEndpoint(), width, height, smartCropping, imageUrl);
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> generateThumbnailAsync(int width, int height, String url) {
        return generateThumbnailWithRestResponseAsync(width, height, url)
            .flatMap((StreamResponse res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param url Publicly reachable URL of an image.
     * @param smartCropping Boolean flag for enabling smart cropping.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> generateThumbnailWithRestResponseAsync(int width, int height, String url, Boolean smartCropping) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.generateThumbnail(this.getEndpoint(), width, height, smartCropping, imageUrl);
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param url Publicly reachable URL of an image.
     * @param smartCropping Boolean flag for enabling smart cropping.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> generateThumbnailAsync(int width, int height, String url, Boolean smartCropping) {
        return generateThumbnailWithRestResponseAsync(width, height, url, smartCropping)
            .flatMap((StreamResponse res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation returns a bounding box around the most important area of the image.
     * A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AreaOfInterestResult>> getAreaOfInterestWithRestResponseAsync(String url) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.getAreaOfInterest(this.getEndpoint(), imageUrl);
    }

    /**
     * This operation returns a bounding box around the most important area of the image.
     * A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AreaOfInterestResult> getAreaOfInterestAsync(String url) {
        return getAreaOfInterestWithRestResponseAsync(url)
            .flatMap((SimpleResponse<AreaOfInterestResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
     *
     * @param mode Type of text to recognize. Possible values include: 'Handwritten', 'Printed'.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecognizeTextResponse> recognizeTextWithRestResponseAsync(String url, TextRecognitionMode mode) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.recognizeText(this.getEndpoint(), mode, imageUrl);
    }

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
     *
     * @param mode Type of text to recognize. Possible values include: 'Handwritten', 'Printed'.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recognizeTextAsync(String url, TextRecognitionMode mode) {
        return recognizeTextWithRestResponseAsync(url, mode)
            .flatMap((RecognizeTextResponse res) -> Mono.empty());
    }

    /**
     * This interface is used for getting text operation result. The URL to this interface should be retrieved from 'Operation-Location' field returned from Recognize Text interface.
     *
     * @param operationId Id of the text operation returned in the response of the 'Recognize Text'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TextOperationResult>> getTextOperationResultWithRestResponseAsync(String operationId) {
        return service.getTextOperationResult(operationId, this.getEndpoint());
    }

    /**
     * This interface is used for getting text operation result. The URL to this interface should be retrieved from 'Operation-Location' field returned from Recognize Text interface.
     *
     * @param operationId Id of the text operation returned in the response of the 'Recognize Text'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TextOperationResult> getTextOperationResultAsync(String operationId) {
        return getTextOperationResultWithRestResponseAsync(operationId)
            .flatMap((SimpleResponse<TextOperationResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read File interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadOperationResult' operation to access OCR results.​.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BatchReadFileResponse> batchReadFileWithRestResponseAsync(String url) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.batchReadFile(this.getEndpoint(), imageUrl);
    }

    /**
     * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read File interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadOperationResult' operation to access OCR results.​.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> batchReadFileAsync(String url) {
        return batchReadFileWithRestResponseAsync(url)
            .flatMap((BatchReadFileResponse res) -> Mono.empty());
    }

    /**
     * This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Batch Read File interface.
     *
     * @param operationId Id of read operation returned in the response of the 'Batch Read File' interface.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ReadOperationResult>> getReadOperationResultWithRestResponseAsync(String operationId) {
        return service.getReadOperationResult(operationId, this.getEndpoint());
    }

    /**
     * This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Batch Read File interface.
     *
     * @param operationId Id of read operation returned in the response of the 'Batch Read File' interface.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReadOperationResult> getReadOperationResultAsync(String operationId) {
        return getReadOperationResultWithRestResponseAsync(operationId)
            .flatMap((SimpleResponse<ReadOperationResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageAnalysis>> analyzeImageInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image) {
        final String language = "en";
        String visualFeaturesConverted = null;
        String detailsConverted = null;
        String descriptionExcludeConverted = null;
        return service.analyzeImageInStream(this.getEndpoint(), visualFeaturesConverted, detailsConverted, language, descriptionExcludeConverted, contentLength, image);
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysis> analyzeImageInStreamAsync(long contentLength, Flux<ByteBuffer> image) {
        return analyzeImageInStreamWithRestResponseAsync(contentLength, image)
            .flatMap((SimpleResponse<ImageAnalysis> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @param visualFeatures A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&amp;white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English.
     * @param details A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @param descriptionExclude Turn off specified domain models when generating the description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageAnalysis>> analyzeImageInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude) {
        String visualFeaturesConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(visualFeatures, CollectionFormat.CSV);
        String detailsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(details, CollectionFormat.CSV);
        String descriptionExcludeConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(descriptionExclude, CollectionFormat.CSV);
        return service.analyzeImageInStream(this.getEndpoint(), visualFeaturesConverted, detailsConverted, language, descriptionExcludeConverted, contentLength, image);
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @param visualFeatures A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&amp;white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English.
     * @param details A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @param descriptionExclude Turn off specified domain models when generating the description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysis> analyzeImageInStreamAsync(long contentLength, Flux<ByteBuffer> image, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude) {
        return analyzeImageInStreamWithRestResponseAsync(contentLength, image, visualFeatures, details, language, descriptionExclude)
            .flatMap((SimpleResponse<ImageAnalysis> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation returns a bounding box around the most important area of the image.
     * A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AreaOfInterestResult>> getAreaOfInterestInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image) {
        return service.getAreaOfInterestInStream(this.getEndpoint(), contentLength, image);
    }

    /**
     * This operation returns a bounding box around the most important area of the image.
     * A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AreaOfInterestResult> getAreaOfInterestInStreamAsync(long contentLength, Flux<ByteBuffer> image) {
        return getAreaOfInterestInStreamWithRestResponseAsync(contentLength, image)
            .flatMap((SimpleResponse<AreaOfInterestResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageDescription>> describeImageInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image) {
        final Integer maxCandidates = 1;
        final String language = "en";
        String descriptionExcludeConverted = null;
        return service.describeImageInStream(this.getEndpoint(), maxCandidates, language, descriptionExcludeConverted, contentLength, image);
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageDescription> describeImageInStreamAsync(long contentLength, Flux<ByteBuffer> image) {
        return describeImageInStreamWithRestResponseAsync(contentLength, image)
            .flatMap((SimpleResponse<ImageDescription> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @param maxCandidates Maximum number of candidate descriptions to be returned.  The default is 1.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @param descriptionExclude Turn off specified domain models when generating the description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageDescription>> describeImageInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude) {
        String descriptionExcludeConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(descriptionExclude, CollectionFormat.CSV);
        return service.describeImageInStream(this.getEndpoint(), maxCandidates, language, descriptionExcludeConverted, contentLength, image);
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @param maxCandidates Maximum number of candidate descriptions to be returned.  The default is 1.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @param descriptionExclude Turn off specified domain models when generating the description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageDescription> describeImageInStreamAsync(long contentLength, Flux<ByteBuffer> image, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude) {
        return describeImageInStreamWithRestResponseAsync(contentLength, image, maxCandidates, language, descriptionExclude)
            .flatMap((SimpleResponse<ImageDescription> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Performs object detection on the specified image.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DetectResult>> detectObjectsInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image) {
        return service.detectObjectsInStream(this.getEndpoint(), contentLength, image);
    }

    /**
     * Performs object detection on the specified image.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectResult> detectObjectsInStreamAsync(long contentLength, Flux<ByteBuffer> image) {
        return detectObjectsInStreamWithRestResponseAsync(contentLength, image)
            .flatMap((SimpleResponse<DetectResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> generateThumbnailInStreamWithRestResponseAsync(int width, int height, long contentLength, Flux<ByteBuffer> image) {
        final Boolean smartCropping = false;
        return service.generateThumbnailInStream(this.getEndpoint(), width, height, smartCropping, contentLength, image);
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> generateThumbnailInStreamAsync(int width, int height, long contentLength, Flux<ByteBuffer> image) {
        return generateThumbnailInStreamWithRestResponseAsync(width, height, contentLength, image)
            .flatMap((StreamResponse res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param smartCropping Boolean flag for enabling smart cropping.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> generateThumbnailInStreamWithRestResponseAsync(int width, int height, long contentLength, Flux<ByteBuffer> image, Boolean smartCropping) {
        return service.generateThumbnailInStream(this.getEndpoint(), width, height, smartCropping, contentLength, image);
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param smartCropping Boolean flag for enabling smart cropping.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> generateThumbnailInStreamAsync(int width, int height, long contentLength, Flux<ByteBuffer> image, Boolean smartCropping) {
        return generateThumbnailInStreamWithRestResponseAsync(width, height, contentLength, image, smartCropping)
            .flatMap((StreamResponse res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomainInStreamWithRestResponseAsync(String model, long contentLength, Flux<ByteBuffer> image) {
        final String language = "en";
        return service.analyzeImageByDomainInStream(model, this.getEndpoint(), language, contentLength, image);
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DomainModelResults> analyzeImageByDomainInStreamAsync(String model, long contentLength, Flux<ByteBuffer> image) {
        return analyzeImageByDomainInStreamWithRestResponseAsync(model, contentLength, image)
            .flatMap((SimpleResponse<DomainModelResults> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomainInStreamWithRestResponseAsync(String model, long contentLength, Flux<ByteBuffer> image, String language) {
        return service.analyzeImageByDomainInStream(model, this.getEndpoint(), language, contentLength, image);
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param contentLength The content length.
     * @param image An image stream.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DomainModelResults> analyzeImageByDomainInStreamAsync(String model, long contentLength, Flux<ByteBuffer> image, String language) {
        return analyzeImageByDomainInStreamWithRestResponseAsync(model, contentLength, image, language)
            .flatMap((SimpleResponse<DomainModelResults> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OcrResult>> recognizePrintedTextInStreamWithRestResponseAsync(boolean detectOrientation, long contentLength, Flux<ByteBuffer> image) {
        final OcrLanguages language = OcrLanguages.UNK;
        return service.recognizePrintedTextInStream(this.getEndpoint(), detectOrientation, language, contentLength, image);
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OcrResult> recognizePrintedTextInStreamAsync(boolean detectOrientation, long contentLength, Flux<ByteBuffer> image) {
        return recognizePrintedTextInStreamWithRestResponseAsync(detectOrientation, contentLength, image)
            .flatMap((SimpleResponse<OcrResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param contentLength The content length.
     * @param image An image stream.
     * @param language The BCP-47 language code of the text to be detected in the image. The default value is 'unk'. Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OcrResult>> recognizePrintedTextInStreamWithRestResponseAsync(boolean detectOrientation, long contentLength, Flux<ByteBuffer> image, OcrLanguages language) {
        return service.recognizePrintedTextInStream(this.getEndpoint(), detectOrientation, language, contentLength, image);
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param contentLength The content length.
     * @param image An image stream.
     * @param language The BCP-47 language code of the text to be detected in the image. The default value is 'unk'. Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OcrResult> recognizePrintedTextInStreamAsync(boolean detectOrientation, long contentLength, Flux<ByteBuffer> image, OcrLanguages language) {
        return recognizePrintedTextInStreamWithRestResponseAsync(detectOrientation, contentLength, image, language)
            .flatMap((SimpleResponse<OcrResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TagResult>> tagImageInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image) {
        final String language = "en";
        return service.tagImageInStream(this.getEndpoint(), language, contentLength, image);
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagResult> tagImageInStreamAsync(long contentLength, Flux<ByteBuffer> image) {
        return tagImageInStreamWithRestResponseAsync(contentLength, image)
            .flatMap((SimpleResponse<TagResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TagResult>> tagImageInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image, String language) {
        return service.tagImageInStream(this.getEndpoint(), language, contentLength, image);
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagResult> tagImageInStreamAsync(long contentLength, Flux<ByteBuffer> image, String language) {
        return tagImageInStreamWithRestResponseAsync(contentLength, image, language)
            .flatMap((SimpleResponse<TagResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @param mode Type of text to recognize. Possible values include: 'Handwritten', 'Printed'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecognizeTextInStreamResponse> recognizeTextInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image, TextRecognitionMode mode) {
        return service.recognizeTextInStream(this.getEndpoint(), contentLength, image, mode);
    }

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @param mode Type of text to recognize. Possible values include: 'Handwritten', 'Printed'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recognizeTextInStreamAsync(long contentLength, Flux<ByteBuffer> image, TextRecognitionMode mode) {
        return recognizeTextInStreamWithRestResponseAsync(contentLength, image, mode)
            .flatMap((RecognizeTextInStreamResponse res) -> Mono.empty());
    }

    /**
     * Use this interface to get the result of a Read Document operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read Document interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'Get Read Result operation' to access OCR results.​.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BatchReadFileInStreamResponse> batchReadFileInStreamWithRestResponseAsync(long contentLength, Flux<ByteBuffer> image) {
        return service.batchReadFileInStream(this.getEndpoint(), contentLength, image);
    }

    /**
     * Use this interface to get the result of a Read Document operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read Document interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'Get Read Result operation' to access OCR results.​.
     *
     * @param contentLength The content length.
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> batchReadFileInStreamAsync(long contentLength, Flux<ByteBuffer> image) {
        return batchReadFileInStreamWithRestResponseAsync(contentLength, image)
            .flatMap((BatchReadFileInStreamResponse res) -> Mono.empty());
    }
}
