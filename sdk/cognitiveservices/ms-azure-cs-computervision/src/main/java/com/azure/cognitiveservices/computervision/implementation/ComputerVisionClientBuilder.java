// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.computervision.implementation;

import com.azure.cognitiveservices.computervision.ComputerVisionClient;
import com.azure.cognitiveservices.computervision.models.AreaOfInterestResult;
import com.azure.cognitiveservices.computervision.models.BatchReadFileInStreamResponse;
import com.azure.cognitiveservices.computervision.models.BatchReadFileResponse;
import com.azure.cognitiveservices.computervision.models.ComputerVisionErrorException;
import com.azure.cognitiveservices.computervision.models.DescriptionExclude;
import com.azure.cognitiveservices.computervision.models.Details;
import com.azure.cognitiveservices.computervision.models.DetectResult;
import com.azure.cognitiveservices.computervision.models.DomainModelResults;
import com.azure.cognitiveservices.computervision.models.ImageAnalysis;
import com.azure.cognitiveservices.computervision.models.ImageDescription;
import com.azure.cognitiveservices.computervision.models.ImageUrl;
import com.azure.cognitiveservices.computervision.models.ListModelsResult;
import com.azure.cognitiveservices.computervision.models.OcrLanguages;
import com.azure.cognitiveservices.computervision.models.OcrResult;
import com.azure.cognitiveservices.computervision.models.ReadOperationResult;
import com.azure.cognitiveservices.computervision.models.RecognizeTextInStreamResponse;
import com.azure.cognitiveservices.computervision.models.RecognizeTextResponse;
import com.azure.cognitiveservices.computervision.models.TagResult;
import com.azure.cognitiveservices.computervision.models.TextOperationResult;
import com.azure.cognitiveservices.computervision.models.TextRecognitionMode;
import com.azure.cognitiveservices.computervision.models.VisualFeatureTypes;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.implementation.CollectionFormat;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.serializer.jackson.JacksonAdapter;
import java.nio.ByteBuffer;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * A builder for creating a new instance of the ComputerVisionClient type.
 */
@ServiceClientBuilder(serviceClients = ComputerVisionClient.class)
public final class ComputerVisionClientBuilder {
    /*
     * Supported Cognitive Services endpoints.
     */
    private String endpoint;

    /**
     * Sets Supported Cognitive Services endpoints.
     *
     * @param endpoint the endpoint value.
     * @return the ComputerVisionClientBuilder.
     */
    public ComputerVisionClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    private HttpPipeline pipeline;

    /**
     * Sets The HTTP pipeline to send requests through.
     *
     * @param pipeline the pipeline value.
     * @return the ComputerVisionClientBuilder.
     */
    public ComputerVisionClientBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /**
     * Builds an instance of ComputerVisionClient with the provided parameters.
     *
     * @return an instance of ComputerVisionClient.
     */
    public ComputerVisionClient build() {
        if (pipeline == null) {
            this.pipeline = RestProxy.createDefaultPipeline();
        }
        ComputerVisionClientImpl client = new ComputerVisionClientImpl(pipeline);
        if (this.endpoint != null) {
            client.setEndpoint(this.endpoint);
        }
        return client;
    }
}
