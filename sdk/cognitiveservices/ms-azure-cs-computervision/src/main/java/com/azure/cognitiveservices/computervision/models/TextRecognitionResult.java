// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.computervision.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * An object representing a recognized text region.
 */
@Fluent
public final class TextRecognitionResult {
    /*
     * The 1-based page number of the recognition result.
     */
    @JsonProperty(value = "page")
    private Integer page;

    /*
     * The orientation of the image in degrees in the clockwise direction.
     * Range between [0, 360).
     */
    @JsonProperty(value = "clockwiseOrientation")
    private Double clockwiseOrientation;

    /*
     * The width of the image in pixels or the PDF in inches.
     */
    @JsonProperty(value = "width")
    private Double width;

    /*
     * The height of the image in pixels or the PDF in inches.
     */
    @JsonProperty(value = "height")
    private Double height;

    /*
     * The unit used in the Width, Height and BoundingBox. For images, the unit
     * is 'pixel'. For PDF, the unit is 'inch'. Possible values include:
     * 'pixel', 'inch'
     */
    @JsonProperty(value = "unit")
    private TextRecognitionResultDimensionUnit unit;

    /*
     * A list of recognized text lines.
     */
    @JsonProperty(value = "lines", required = true)
    private List<Line> lines;

    /**
     * Get the page property: The 1-based page number of the recognition
     * result.
     *
     * @return the page value.
     */
    public Integer getPage() {
        return this.page;
    }

    /**
     * Set the page property: The 1-based page number of the recognition
     * result.
     *
     * @param page the page value to set.
     * @return the TextRecognitionResult object itself.
     */
    public TextRecognitionResult setPage(Integer page) {
        this.page = page;
        return this;
    }

    /**
     * Get the clockwiseOrientation property: The orientation of the image in
     * degrees in the clockwise direction. Range between [0, 360).
     *
     * @return the clockwiseOrientation value.
     */
    public Double getClockwiseOrientation() {
        return this.clockwiseOrientation;
    }

    /**
     * Set the clockwiseOrientation property: The orientation of the image in
     * degrees in the clockwise direction. Range between [0, 360).
     *
     * @param clockwiseOrientation the clockwiseOrientation value to set.
     * @return the TextRecognitionResult object itself.
     */
    public TextRecognitionResult setClockwiseOrientation(Double clockwiseOrientation) {
        this.clockwiseOrientation = clockwiseOrientation;
        return this;
    }

    /**
     * Get the width property: The width of the image in pixels or the PDF in
     * inches.
     *
     * @return the width value.
     */
    public Double getWidth() {
        return this.width;
    }

    /**
     * Set the width property: The width of the image in pixels or the PDF in
     * inches.
     *
     * @param width the width value to set.
     * @return the TextRecognitionResult object itself.
     */
    public TextRecognitionResult setWidth(Double width) {
        this.width = width;
        return this;
    }

    /**
     * Get the height property: The height of the image in pixels or the PDF in
     * inches.
     *
     * @return the height value.
     */
    public Double getHeight() {
        return this.height;
    }

    /**
     * Set the height property: The height of the image in pixels or the PDF in
     * inches.
     *
     * @param height the height value to set.
     * @return the TextRecognitionResult object itself.
     */
    public TextRecognitionResult setHeight(Double height) {
        this.height = height;
        return this;
    }

    /**
     * Get the unit property: The unit used in the Width, Height and
     * BoundingBox. For images, the unit is 'pixel'. For PDF, the unit is
     * 'inch'. Possible values include: 'pixel', 'inch'.
     *
     * @return the unit value.
     */
    public TextRecognitionResultDimensionUnit getUnit() {
        return this.unit;
    }

    /**
     * Set the unit property: The unit used in the Width, Height and
     * BoundingBox. For images, the unit is 'pixel'. For PDF, the unit is
     * 'inch'. Possible values include: 'pixel', 'inch'.
     *
     * @param unit the unit value to set.
     * @return the TextRecognitionResult object itself.
     */
    public TextRecognitionResult setUnit(TextRecognitionResultDimensionUnit unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the lines property: A list of recognized text lines.
     *
     * @return the lines value.
     */
    public List<Line> getLines() {
        return this.lines;
    }

    /**
     * Set the lines property: A list of recognized text lines.
     *
     * @param lines the lines value to set.
     * @return the TextRecognitionResult object itself.
     */
    public TextRecognitionResult setLines(List<Line> lines) {
        this.lines = lines;
        return this;
    }
}
