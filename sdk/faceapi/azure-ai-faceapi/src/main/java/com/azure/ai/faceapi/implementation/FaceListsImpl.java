// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi.implementation;

import com.azure.ai.faceapi.models.APIErrorException;
import com.azure.ai.faceapi.models.DetectionModel;
import com.azure.ai.faceapi.models.FaceList;
import com.azure.ai.faceapi.models.ImageUrl;
import com.azure.ai.faceapi.models.MetaDataContract;
import com.azure.ai.faceapi.models.NameAndUserDataContract;
import com.azure.ai.faceapi.models.PersistedFace;
import com.azure.ai.faceapi.models.RecognitionModel;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in FaceLists. */
public final class FaceListsImpl {
    /** The proxy service used to perform REST calls. */
    private final FaceListsService service;

    /** The service client containing this operation class. */
    private final FaceClientImpl client;

    /**
     * Initializes an instance of FaceListsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    FaceListsImpl(FaceClientImpl client) {
        this.service = RestProxy.create(FaceListsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for FaceClientFaceLists to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{Endpoint}/face/v1.0")
    @ServiceInterface(name = "FaceClientFaceLists")
    private interface FaceListsService {
        @Put("/facelists/{faceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> create(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @BodyParam("application/json") MetaDataContract body);

        @Get("/facelists/{faceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<FaceList>> get(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel);

        @Patch("/facelists/{faceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> update(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @BodyParam("application/json") NameAndUserDataContract body);

        @Delete("/facelists/{faceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> delete(@HostParam("Endpoint") String endpoint, @PathParam("faceListId") String faceListId);

        @Get("/facelists")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<List<FaceList>>> list(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel);

        @Delete("/facelists/{faceListId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> deleteFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @PathParam("persistedFaceId") UUID persistedFaceId);

        @Post("/facelists/{faceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<PersistedFace>> addFaceFromUrl(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @QueryParam("userData") String userData,
                @QueryParam("targetFace") String targetFace,
                @QueryParam("detectionModel") DetectionModel detectionModel,
                @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/facelists/{faceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<PersistedFace>> addFaceFromStream(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @QueryParam("userData") String userData,
                @QueryParam("targetFace") String targetFace,
                @QueryParam("detectionModel") DetectionModel detectionModel,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> image,
                @HeaderParam("Content-Length") long contentLength);
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to
     * 64 face lists are allowed in one subscription. &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and
     * used by [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     * &lt;br /&gt; After creation, user should use [FaceList - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl) to import the faces. No
     * image will be stored. Only the extracted face features are stored on server until [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br /&gt; Find
     * Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face
     * identification. But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify). &lt;br /&gt; Please consider
     * [LargeFaceList](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist) when the face number is
     * large. It can support up to 1,000,000 faces. &lt;br /&gt;'recognitionModel' should be specified to associate with
     * this face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     * explicitly specify the model you need in this parameter. New faces that are added to an existing face list will
     * use the recognition model that's already associated with the collection. Existing face features in a face list
     * can't be updated to features extracted by another version of recognition model. * 'recognition_01': The default
     * recognition model for [FaceList-
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create). All those face lists created
     * before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition model released in 2019
     * March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     *
     * @param faceListId Id referencing a particular face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponseAsync(
            String faceListId, String name, String userData, RecognitionModel recognitionModel) {
        MetaDataContract body = new MetaDataContract();
        body.setName(name);
        body.setUserData(userData);
        body.setRecognitionModel(recognitionModel);
        return service.create(this.client.getEndpoint(), faceListId, body);
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to
     * 64 face lists are allowed in one subscription. &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and
     * used by [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     * &lt;br /&gt; After creation, user should use [FaceList - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl) to import the faces. No
     * image will be stored. Only the extracted face features are stored on server until [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br /&gt; Find
     * Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face
     * identification. But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify). &lt;br /&gt; Please consider
     * [LargeFaceList](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist) when the face number is
     * large. It can support up to 1,000,000 faces. &lt;br /&gt;'recognitionModel' should be specified to associate with
     * this face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     * explicitly specify the model you need in this parameter. New faces that are added to an existing face list will
     * use the recognition model that's already associated with the collection. Existing face features in a face list
     * can't be updated to features extracted by another version of recognition model. * 'recognition_01': The default
     * recognition model for [FaceList-
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create). All those face lists created
     * before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition model released in 2019
     * March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     *
     * @param faceListId Id referencing a particular face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createAsync(String faceListId, String name, String userData, RecognitionModel recognitionModel) {
        return createWithResponseAsync(faceListId, name, userData, recognitionModel)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to
     * 64 face lists are allowed in one subscription. &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and
     * used by [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     * &lt;br /&gt; After creation, user should use [FaceList - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl) to import the faces. No
     * image will be stored. Only the extracted face features are stored on server until [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br /&gt; Find
     * Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face
     * identification. But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify). &lt;br /&gt; Please consider
     * [LargeFaceList](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist) when the face number is
     * large. It can support up to 1,000,000 faces. &lt;br /&gt;'recognitionModel' should be specified to associate with
     * this face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     * explicitly specify the model you need in this parameter. New faces that are added to an existing face list will
     * use the recognition model that's already associated with the collection. Existing face features in a face list
     * can't be updated to features extracted by another version of recognition model. * 'recognition_01': The default
     * recognition model for [FaceList-
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create). All those face lists created
     * before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition model released in 2019
     * March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     *
     * @param faceListId Id referencing a particular face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String faceListId, String name, String userData, RecognitionModel recognitionModel) {
        createAsync(faceListId, name, userData, recognitionModel).block();
    }

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face list object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<FaceList>> getWithResponseAsync(String faceListId, Boolean returnRecognitionModel) {
        return service.get(this.client.getEndpoint(), faceListId, returnRecognitionModel);
    }

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face list object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FaceList> getAsync(String faceListId, Boolean returnRecognitionModel) {
        return getWithResponseAsync(faceListId, returnRecognitionModel)
                .flatMap(
                        (Response<FaceList> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face list object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FaceList get(String faceListId, Boolean returnRecognitionModel) {
        return getAsync(faceListId, returnRecognitionModel).block();
    }

    /**
     * Update information of a face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponseAsync(String faceListId, String name, String userData) {
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.setName(name);
        body.setUserData(userData);
        return service.update(this.client.getEndpoint(), faceListId, body);
    }

    /**
     * Update information of a face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAsync(String faceListId, String name, String userData) {
        return updateWithResponseAsync(faceListId, name, userData).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update information of a face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String faceListId, String name, String userData) {
        updateAsync(faceListId, name, userData).block();
    }

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String faceListId) {
        return service.delete(this.client.getEndpoint(), faceListId);
    }

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String faceListId) {
        return deleteWithResponseAsync(faceListId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String faceListId) {
        deleteAsync(faceListId).block();
    }

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt; To get face information inside
     * faceList use [FaceList - Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/get).
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of face list results, with fields of faceListId, name and userData.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<FaceList>>> listWithResponseAsync(Boolean returnRecognitionModel) {
        return service.list(this.client.getEndpoint(), returnRecognitionModel);
    }

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt; To get face information inside
     * faceList use [FaceList - Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/get).
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of face list results, with fields of faceListId, name and userData.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<FaceList>> listAsync(Boolean returnRecognitionModel) {
        return listWithResponseAsync(returnRecognitionModel)
                .flatMap(
                        (Response<List<FaceList>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt; To get face information inside
     * faceList use [FaceList - Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/get).
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of face list results, with fields of faceListId, name and userData.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<FaceList> list(Boolean returnRecognitionModel) {
        return listAsync(returnRecognitionModel).block();
    }

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId. &lt;br /&gt; Adding/deleting faces
     * to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponseAsync(String faceListId, UUID persistedFaceId) {
        return service.deleteFace(this.client.getEndpoint(), faceListId, persistedFaceId);
    }

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId. &lt;br /&gt; Adding/deleting faces
     * to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteFaceAsync(String faceListId, UUID persistedFaceId) {
        return deleteFaceWithResponseAsync(faceListId, persistedFaceId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId. &lt;br /&gt; Adding/deleting faces
     * to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFace(String faceListId, UUID persistedFaceId) {
        deleteFaceAsync(faceListId, persistedFaceId).block();
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or
     * [FaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and
     * face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP
     * format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one
     * face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned
     * from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are
     * processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is
     * 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels
     * will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use
     * and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [FaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PersistedFace>> addFaceFromUrlWithResponseAsync(
            String faceListId, String url, String userData, List<Integer> targetFace, DetectionModel detectionModel) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        String targetFaceConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(
                this.client.getEndpoint(), faceListId, userData, targetFaceConverted, detectionModel, imageUrl);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or
     * [FaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and
     * face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP
     * format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one
     * face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned
     * from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are
     * processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is
     * 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels
     * will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use
     * and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [FaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersistedFace> addFaceFromUrlAsync(
            String faceListId, String url, String userData, List<Integer> targetFace, DetectionModel detectionModel) {
        return addFaceFromUrlWithResponseAsync(faceListId, url, userData, targetFace, detectionModel)
                .flatMap(
                        (Response<PersistedFace> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or
     * [FaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and
     * face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP
     * format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one
     * face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned
     * from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are
     * processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is
     * 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels
     * will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use
     * and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [FaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersistedFace addFaceFromUrl(
            String faceListId, String url, String userData, List<Integer> targetFace, DetectionModel detectionModel) {
        return addFaceFromUrlAsync(faceListId, url, userData, targetFace, detectionModel).block();
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or
     * [FaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and
     * face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP
     * format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one
     * face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned
     * from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are
     * processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is
     * 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels
     * will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use
     * and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [FaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PersistedFace>> addFaceFromStreamWithResponseAsync(
            String faceListId,
            Flux<ByteBuffer> image,
            long contentLength,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        String targetFaceConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromStream(
                this.client.getEndpoint(),
                faceListId,
                userData,
                targetFaceConverted,
                detectionModel,
                image,
                contentLength);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or
     * [FaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and
     * face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP
     * format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one
     * face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned
     * from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are
     * processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is
     * 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels
     * will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use
     * and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [FaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersistedFace> addFaceFromStreamAsync(
            String faceListId,
            Flux<ByteBuffer> image,
            long contentLength,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return addFaceFromStreamWithResponseAsync(
                        faceListId, image, contentLength, userData, targetFace, detectionModel)
                .flatMap(
                        (Response<PersistedFace> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or
     * [FaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and
     * face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP
     * format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one
     * face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned
     * from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are
     * processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is
     * 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels
     * will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use
     * and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [FaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersistedFace addFaceFromStream(
            String faceListId,
            Flux<ByteBuffer> image,
            long contentLength,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return addFaceFromStreamAsync(faceListId, image, contentLength, userData, targetFace, detectionModel).block();
    }
}
