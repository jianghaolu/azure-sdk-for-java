// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi;

import com.azure.ai.faceapi.implementation.LargePersonGroupsImpl;
import com.azure.ai.faceapi.models.APIErrorException;
import com.azure.ai.faceapi.models.LargePersonGroup;
import com.azure.ai.faceapi.models.RecognitionModel;
import com.azure.ai.faceapi.models.TrainingStatus;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import java.util.List;

/** Initializes a new instance of the synchronous FaceClient type. */
@ServiceClient(builder = FaceClientBuilder.class)
public final class LargePersonGroupClient {
    private LargePersonGroupsImpl serviceClient;

    /** Initializes an instance of LargePersonGroups client. */
    LargePersonGroupClient(LargePersonGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new large person group with user-specified largePersonGroupId, name, an optional userData and
     * recognitionModel. &lt;br /&gt; A large person group is the container of the uploaded person data, including face
     * recognition feature, and up to 1,000,000 people. &lt;br /&gt; After creation, use [LargePersonGroup Person -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/create) to add person
     * into the group, and call [LargePersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/train) to get this group ready
     * for [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify). &lt;br /&gt; No
     * image will be stored. Only the person's extracted face features and userData will be stored on server until
     * [LargePersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete)
     * is called. &lt;br/&gt;'recognitionModel' should be specified to associate with this large person group. The
     * default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify
     * the model you need in this parameter. New faces that are added to an existing large person group will use the
     * recognition model that's already associated with the collection. Existing face features in a large person group
     * can't be updated to features extracted by another version of recognition model. * 'recognition_01': The default
     * recognition model for [LargePersonGroup -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/create). All those large
     * person groups created before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'.
     *
     * <p>Large person group quota: * Free-tier subscription quota: 1,000 large person groups. * S0-tier subscription
     * quota: 1,000,000 large person groups.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String largePersonGroupId, String name, String userData, RecognitionModel recognitionModel) {
        this.serviceClient.create(largePersonGroupId, name, userData, recognitionModel);
    }

    /**
     * Delete an existing large person group. Persisted face features of all people in the large person group will also
     * be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String largePersonGroupId) {
        this.serviceClient.delete(largePersonGroupId);
    }

    /**
     * Retrieve the information of a large person group, including its name, userData and recognitionModel. This API
     * returns large person group information only, use [LargePersonGroup Person -
     * List](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/list) instead to retrieve
     * person information under the large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return large person group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LargePersonGroup get(String largePersonGroupId, Boolean returnRecognitionModel) {
        return this.serviceClient.get(largePersonGroupId, returnRecognitionModel);
    }

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in
     * request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String largePersonGroupId, String name, String userData) {
        this.serviceClient.update(largePersonGroupId, name, userData);
    }

    /**
     * Retrieve the training status of a large person group (completed or ongoing).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrainingStatus getTrainingStatus(String largePersonGroupId) {
        return this.serviceClient.getTrainingStatus(largePersonGroupId);
    }

    /**
     * List all existing large person groups’ largePersonGroupId, name, userData and recognitionModel.&lt;br /&gt; *
     * Large person groups are stored in alphabetical order of largePersonGroupId. * "start" parameter (string,
     * optional) is a user-provided largePersonGroupId value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item. * "top" parameter (int, optional) specifies the
     * number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can
     * specify "start" with the last returned entry’s Id of the current call. &lt;br /&gt; For example, total 5 large
     * person groups: "group1", ..., "group5". &lt;br /&gt; "start=&amp;top=" will return all 5 groups. &lt;br /&gt;
     * "start=&amp;top=2" will return "group1", "group2". &lt;br /&gt; "start=group2&amp;top=3" will return "group3",
     * "group4", "group5".
     *
     * @param start List large person groups from the least largePersonGroupId greater than the "start".
     * @param top The number of large person groups to list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of large person groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LargePersonGroup> list(String start, Integer top, Boolean returnRecognitionModel) {
        return this.serviceClient.list(start, top, returnRecognitionModel);
    }

    /**
     * Queue a large person group training task, the training task may not be started immediately.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void train(String largePersonGroupId) {
        this.serviceClient.train(largePersonGroupId);
    }
}
