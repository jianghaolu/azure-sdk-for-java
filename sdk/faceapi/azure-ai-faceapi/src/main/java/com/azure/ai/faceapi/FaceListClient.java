// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi;

import com.azure.ai.faceapi.implementation.FaceListsImpl;
import com.azure.ai.faceapi.models.APIErrorException;
import com.azure.ai.faceapi.models.DetectionModel;
import com.azure.ai.faceapi.models.FaceList;
import com.azure.ai.faceapi.models.PersistedFace;
import com.azure.ai.faceapi.models.RecognitionModel;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Flux;

/** Initializes a new instance of the synchronous FaceClient type. */
@ServiceClient(builder = FaceClientBuilder.class)
public final class FaceListClient {
    private FaceListsImpl serviceClient;

    /** Initializes an instance of FaceLists client. */
    FaceListClient(FaceListsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to
     * 64 face lists are allowed in one subscription. &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and
     * used by [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     * &lt;br /&gt; After creation, user should use [FaceList - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl) to import the faces. No
     * image will be stored. Only the extracted face features are stored on server until [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br /&gt; Find
     * Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face
     * identification. But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify). &lt;br /&gt; Please consider
     * [LargeFaceList](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist) when the face number is
     * large. It can support up to 1,000,000 faces. &lt;br /&gt;'recognitionModel' should be specified to associate with
     * this face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     * explicitly specify the model you need in this parameter. New faces that are added to an existing face list will
     * use the recognition model that's already associated with the collection. Existing face features in a face list
     * can't be updated to features extracted by another version of recognition model. * 'recognition_01': The default
     * recognition model for [FaceList-
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create). All those face lists created
     * before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition model released in 2019
     * March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     *
     * @param faceListId Id referencing a particular face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String faceListId, String name, String userData, RecognitionModel recognitionModel) {
        this.serviceClient.create(faceListId, name, userData, recognitionModel);
    }

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face list object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FaceList get(String faceListId, Boolean returnRecognitionModel) {
        return this.serviceClient.get(faceListId, returnRecognitionModel);
    }

    /**
     * Update information of a face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String faceListId, String name, String userData) {
        this.serviceClient.update(faceListId, name, userData);
    }

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String faceListId) {
        this.serviceClient.delete(faceListId);
    }

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt; To get face information inside
     * faceList use [FaceList - Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/get).
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of face list results, with fields of faceListId, name and userData.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<FaceList> list(Boolean returnRecognitionModel) {
        return this.serviceClient.list(returnRecognitionModel);
    }

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId. &lt;br /&gt; Adding/deleting faces
     * to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFace(String faceListId, UUID persistedFaceId) {
        this.serviceClient.deleteFace(faceListId, persistedFaceId);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or
     * [FaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and
     * face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP
     * format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one
     * face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned
     * from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are
     * processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is
     * 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels
     * will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use
     * and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [FaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersistedFace addFaceFromUrl(
            String faceListId, String url, String userData, List<Integer> targetFace, DetectionModel detectionModel) {
        return this.serviceClient.addFaceFromUrl(faceListId, url, userData, targetFace, detectionModel);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or
     * [FaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and
     * face size is 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP
     * format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one
     * face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned
     * from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are
     * processed sequentially and to/from different face lists are in parallel. * The minimum detectable face size is
     * 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels
     * will need a proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use
     * and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [FaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param contentLength null
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersistedFace addFaceFromStream(
            String faceListId,
            Flux<ByteBuffer> image,
            long contentLength,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return this.serviceClient.addFaceFromStream(
                faceListId, image, contentLength, userData, targetFace, detectionModel);
    }
}
