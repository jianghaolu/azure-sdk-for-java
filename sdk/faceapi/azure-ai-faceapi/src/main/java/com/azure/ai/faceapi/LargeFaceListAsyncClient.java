// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi;

import com.azure.ai.faceapi.implementation.LargeFaceListsImpl;
import com.azure.ai.faceapi.models.APIErrorException;
import com.azure.ai.faceapi.models.DetectionModel;
import com.azure.ai.faceapi.models.LargeFaceList;
import com.azure.ai.faceapi.models.PersistedFace;
import com.azure.ai.faceapi.models.RecognitionModel;
import com.azure.ai.faceapi.models.TrainingStatus;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous FaceClient type. */
@ServiceClient(builder = FaceClientBuilder.class)
public final class LargeFaceListAsyncClient {
    private LargeFaceListsImpl serviceClient;

    /** Initializes an instance of LargeFaceLists client. */
    LargeFaceListAsyncClient(LargeFaceListsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     * recognitionModel. &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face -
     * Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). &lt;br /&gt; After
     * creation, user should use [LargeFaceList Face -
     * Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the faces
     * and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to
     * make it ready for [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image will be stored.
     * Only the extracted face features are stored on server until [LargeFaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called. &lt;br /&gt;
     * Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way
     * face identification. But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this large face list. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing large face list will use the recognition model that's
     * already associated with the collection. Existing face features in a large face list can't be updated to features
     * extracted by another version of recognition model. * 'recognition_01': The default recognition model for
     * [LargeFaceList- Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All
     * those large face lists created before 2019 March are bonded with this recognition model. * 'recognition_02':
     * Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved
     * compared with 'recognition_01'.
     *
     * <p>Large face list quota: * Free-tier subscription quota: 64 large face lists. * S0-tier subscription quota:
     * 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponse(
            String largeFaceListId, String name, String userData, RecognitionModel recognitionModel) {
        return this.serviceClient.createWithResponseAsync(largeFaceListId, name, userData, recognitionModel);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     * recognitionModel. &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face -
     * Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). &lt;br /&gt; After
     * creation, user should use [LargeFaceList Face -
     * Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the faces
     * and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to
     * make it ready for [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image will be stored.
     * Only the extracted face features are stored on server until [LargeFaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called. &lt;br /&gt;
     * Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way
     * face identification. But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this large face list. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing large face list will use the recognition model that's
     * already associated with the collection. Existing face features in a large face list can't be updated to features
     * extracted by another version of recognition model. * 'recognition_01': The default recognition model for
     * [LargeFaceList- Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All
     * those large face lists created before 2019 March are bonded with this recognition model. * 'recognition_02':
     * Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved
     * compared with 'recognition_01'.
     *
     * <p>Large face list quota: * Free-tier subscription quota: 64 large face lists. * S0-tier subscription quota:
     * 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> create(String largeFaceListId, String name, String userData, RecognitionModel recognitionModel) {
        return this.serviceClient.createAsync(largeFaceListId, name, userData, recognitionModel);
    }

    /**
     * Retrieve a large face listâ€™s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return large face list object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LargeFaceList>> getWithResponse(String largeFaceListId, Boolean returnRecognitionModel) {
        return this.serviceClient.getWithResponseAsync(largeFaceListId, returnRecognitionModel);
    }

    /**
     * Retrieve a large face listâ€™s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return large face list object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LargeFaceList> get(String largeFaceListId, Boolean returnRecognitionModel) {
        return this.serviceClient.getAsync(largeFaceListId, returnRecognitionModel);
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponse(String largeFaceListId, String name, String userData) {
        return this.serviceClient.updateWithResponseAsync(largeFaceListId, name, userData);
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> update(String largeFaceListId, String name, String userData) {
        return this.serviceClient.updateAsync(largeFaceListId, name, userData);
    }

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String largeFaceListId) {
        return this.serviceClient.deleteWithResponseAsync(largeFaceListId);
    }

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String largeFaceListId) {
        return this.serviceClient.deleteAsync(largeFaceListId);
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TrainingStatus>> getTrainingStatusWithResponse(String largeFaceListId) {
        return this.serviceClient.getTrainingStatusWithResponseAsync(largeFaceListId);
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrainingStatus> getTrainingStatus(String largeFaceListId) {
        return this.serviceClient.getTrainingStatusAsync(largeFaceListId);
    }

    /**
     * List large face listsâ€™ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt; To get
     * face information inside largeFaceList use [LargeFaceList Face -
     * Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt; * Large face
     * lists are stored in alphabetical order of largeFaceListId. * "start" parameter (string, optional) is a
     * user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to
     * empty to indicate return from the first item. * "top" parameter (int, optional) specifies the number of entries
     * to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the
     * last returned entryâ€™s Id of the current call. &lt;br /&gt; For example, total 5 large person lists: "list1", ...,
     * "list5". &lt;br /&gt; "start=&amp;top=" will return all 5 lists. &lt;br /&gt; "start=&amp;top=2" will return
     * "list1", "list2". &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of large face list results, with fields of largeFaceListId, name and userData.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<LargeFaceList>>> listWithResponse(Boolean returnRecognitionModel) {
        return this.serviceClient.listWithResponseAsync(returnRecognitionModel);
    }

    /**
     * List large face listsâ€™ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt; To get
     * face information inside largeFaceList use [LargeFaceList Face -
     * Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt; * Large face
     * lists are stored in alphabetical order of largeFaceListId. * "start" parameter (string, optional) is a
     * user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to
     * empty to indicate return from the first item. * "top" parameter (int, optional) specifies the number of entries
     * to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the
     * last returned entryâ€™s Id of the current call. &lt;br /&gt; For example, total 5 large person lists: "list1", ...,
     * "list5". &lt;br /&gt; "start=&amp;top=" will return all 5 lists. &lt;br /&gt; "start=&amp;top=2" will return
     * "list1", "list2". &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of large face list results, with fields of largeFaceListId, name and userData.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<LargeFaceList>> list(Boolean returnRecognitionModel) {
        return this.serviceClient.listAsync(returnRecognitionModel);
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> trainWithResponse(String largeFaceListId) {
        return this.serviceClient.trainWithResponseAsync(largeFaceListId);
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> train(String largeFaceListId) {
        return this.serviceClient.trainAsync(largeFaceListId);
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId. &lt;br /&gt;
     * Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face
     * lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponse(String largeFaceListId, UUID persistedFaceId) {
        return this.serviceClient.deleteFaceWithResponseAsync(largeFaceListId, persistedFaceId);
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId. &lt;br /&gt;
     * Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face
     * lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteFace(String largeFaceListId, UUID persistedFaceId) {
        return this.serviceClient.deleteFaceAsync(largeFaceListId, persistedFaceId);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PersistedFace>> getFaceWithResponse(String largeFaceListId, UUID persistedFaceId) {
        return this.serviceClient.getFaceWithResponseAsync(largeFaceListId, persistedFaceId);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersistedFace> getFace(String largeFaceListId, UUID persistedFaceId) {
        return this.serviceClient.getFaceAsync(largeFaceListId, persistedFaceId);
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateFaceWithResponse(String largeFaceListId, UUID persistedFaceId, String userData) {
        return this.serviceClient.updateFaceWithResponseAsync(largeFaceListId, persistedFaceId, userData);
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateFace(String largeFaceListId, UUID persistedFaceId, String userData) {
        return this.serviceClient.updateFaceAsync(largeFaceListId, persistedFaceId, userData);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called. &lt;br /&gt;
     * Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are
     * supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero
     * or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face
     * - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), thereâ€™s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed
     * sequentially and to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels
     * in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a
     * proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare
     * different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargeFaceList - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PersistedFace>> addFaceFromUrlWithResponse(
            String largeFaceListId,
            String url,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return this.serviceClient.addFaceFromUrlWithResponseAsync(
                largeFaceListId, url, userData, targetFace, detectionModel);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called. &lt;br /&gt;
     * Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are
     * supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero
     * or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face
     * - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), thereâ€™s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed
     * sequentially and to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels
     * in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a
     * proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare
     * different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargeFaceList - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersistedFace> addFaceFromUrl(
            String largeFaceListId,
            String url,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return this.serviceClient.addFaceFromUrlAsync(largeFaceListId, url, userData, targetFace, detectionModel);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of
     * registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of persisted faces within the face list or large face list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<PersistedFace>>> listFacesWithResponse(
            String largeFaceListId, String start, Integer top) {
        return this.serviceClient.listFacesWithResponseAsync(largeFaceListId, start, top);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of
     * registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of persisted faces within the face list or large face list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<PersistedFace>> listFaces(String largeFaceListId, String start, Integer top) {
        return this.serviceClient.listFacesAsync(largeFaceListId, start, top);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called. &lt;br /&gt;
     * Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are
     * supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero
     * or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face
     * - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), thereâ€™s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed
     * sequentially and to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels
     * in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a
     * proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare
     * different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargeFaceList - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param contentLength null
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PersistedFace>> addFaceFromStreamWithResponse(
            String largeFaceListId,
            Flux<ByteBuffer> image,
            long contentLength,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return this.serviceClient.addFaceFromStreamWithResponseAsync(
                largeFaceListId, image, contentLength, userData, targetFace, detectionModel);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called. &lt;br /&gt;
     * Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are
     * supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero
     * or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face
     * - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), thereâ€™s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed
     * sequentially and to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels
     * in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a
     * proportionally larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare
     * different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargeFaceList - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param contentLength null
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersistedFace> addFaceFromStream(
            String largeFaceListId,
            Flux<ByteBuffer> image,
            long contentLength,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return this.serviceClient.addFaceFromStreamAsync(
                largeFaceListId, image, contentLength, userData, targetFace, detectionModel);
    }
}
