// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.UUID;

/** The DetectedFace model. */
@Fluent
public final class DetectedFace {
    /*
     * The faceId property.
     */
    @JsonProperty(value = "faceId")
    private UUID faceId;

    /*
     * Name of recognition model. Recognition model is used when the face
     * features are extracted and associated with detected faceIds,
     * (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     * provided when performing Face - Detect or (Large)FaceList - Create or
     * (Large)PersonGroup - Create. The default value is 'recognition_01', if
     * latest model needed, please explicitly specify the model you need.
     */
    @JsonProperty(value = "recognitionModel")
    private RecognitionModel recognitionModel;

    /*
     * A rectangle within which a face can be found
     */
    @JsonProperty(value = "faceRectangle", required = true)
    private FaceRectangle faceRectangle;

    /*
     * A collection of 27-point face landmarks pointing to the important
     * positions of face components.
     */
    @JsonProperty(value = "faceLandmarks")
    private FaceLandmarks faceLandmarks;

    /*
     * Face Attributes
     */
    @JsonProperty(value = "faceAttributes")
    private FaceAttributes faceAttributes;

    /**
     * Get the faceId property: The faceId property.
     *
     * @return the faceId value.
     */
    public UUID getFaceId() {
        return this.faceId;
    }

    /**
     * Set the faceId property: The faceId property.
     *
     * @param faceId the faceId value to set.
     * @return the DetectedFace object itself.
     */
    public DetectedFace setFaceId(UUID faceId) {
        this.faceId = faceId;
        return this;
    }

    /**
     * Get the recognitionModel property: Name of recognition model. Recognition model is used when the face features
     * are extracted and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model
     * name can be provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create.
     * The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     *
     * @return the recognitionModel value.
     */
    public RecognitionModel getRecognitionModel() {
        return this.recognitionModel;
    }

    /**
     * Set the recognitionModel property: Name of recognition model. Recognition model is used when the face features
     * are extracted and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model
     * name can be provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create.
     * The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     *
     * @param recognitionModel the recognitionModel value to set.
     * @return the DetectedFace object itself.
     */
    public DetectedFace setRecognitionModel(RecognitionModel recognitionModel) {
        this.recognitionModel = recognitionModel;
        return this;
    }

    /**
     * Get the faceRectangle property: A rectangle within which a face can be found.
     *
     * @return the faceRectangle value.
     */
    public FaceRectangle getFaceRectangle() {
        return this.faceRectangle;
    }

    /**
     * Set the faceRectangle property: A rectangle within which a face can be found.
     *
     * @param faceRectangle the faceRectangle value to set.
     * @return the DetectedFace object itself.
     */
    public DetectedFace setFaceRectangle(FaceRectangle faceRectangle) {
        this.faceRectangle = faceRectangle;
        return this;
    }

    /**
     * Get the faceLandmarks property: A collection of 27-point face landmarks pointing to the important positions of
     * face components.
     *
     * @return the faceLandmarks value.
     */
    public FaceLandmarks getFaceLandmarks() {
        return this.faceLandmarks;
    }

    /**
     * Set the faceLandmarks property: A collection of 27-point face landmarks pointing to the important positions of
     * face components.
     *
     * @param faceLandmarks the faceLandmarks value to set.
     * @return the DetectedFace object itself.
     */
    public DetectedFace setFaceLandmarks(FaceLandmarks faceLandmarks) {
        this.faceLandmarks = faceLandmarks;
        return this;
    }

    /**
     * Get the faceAttributes property: Face Attributes.
     *
     * @return the faceAttributes value.
     */
    public FaceAttributes getFaceAttributes() {
        return this.faceAttributes;
    }

    /**
     * Set the faceAttributes property: Face Attributes.
     *
     * @param faceAttributes the faceAttributes value to set.
     * @return the DetectedFace object itself.
     */
    public DetectedFace setFaceAttributes(FaceAttributes faceAttributes) {
        this.faceAttributes = faceAttributes;
        return this;
    }
}
