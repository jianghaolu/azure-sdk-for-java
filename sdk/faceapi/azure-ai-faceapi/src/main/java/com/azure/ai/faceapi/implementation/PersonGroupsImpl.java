// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi.implementation;

import com.azure.ai.faceapi.models.APIErrorException;
import com.azure.ai.faceapi.models.MetaDataContract;
import com.azure.ai.faceapi.models.NameAndUserDataContract;
import com.azure.ai.faceapi.models.PersonGroup;
import com.azure.ai.faceapi.models.RecognitionModel;
import com.azure.ai.faceapi.models.TrainingStatus;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PersonGroups. */
public final class PersonGroupsImpl {
    /** The proxy service used to perform REST calls. */
    private final PersonGroupsService service;

    /** The service client containing this operation class. */
    private final FaceClientImpl client;

    /**
     * Initializes an instance of PersonGroupsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PersonGroupsImpl(FaceClientImpl client) {
        this.service = RestProxy.create(PersonGroupsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for FaceClientPersonGroups to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{Endpoint}/face/v1.0")
    @ServiceInterface(name = "FaceClientPersonGrou")
    private interface PersonGroupsService {
        @Put("/persongroups/{personGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> create(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personGroupId") String personGroupId,
                @BodyParam("application/json") MetaDataContract body);

        @Delete("/persongroups/{personGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> delete(
                @HostParam("Endpoint") String endpoint, @PathParam("personGroupId") String personGroupId);

        @Get("/persongroups/{personGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<PersonGroup>> get(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personGroupId") String personGroupId,
                @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel);

        @Patch("/persongroups/{personGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> update(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personGroupId") String personGroupId,
                @BodyParam("application/json") NameAndUserDataContract body);

        @Get("/persongroups/{personGroupId}/training")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<TrainingStatus>> getTrainingStatus(
                @HostParam("Endpoint") String endpoint, @PathParam("personGroupId") String personGroupId);

        @Get("/persongroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<List<PersonGroup>>> list(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("start") String start,
                @QueryParam("top") Integer top,
                @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel);

        @Post("/persongroups/{personGroupId}/train")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> train(
                @HostParam("Endpoint") String endpoint, @PathParam("personGroupId") String personGroupId);
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel. &lt;br
     * /&gt; A person group is the container of the uploaded person data, including face recognition features. &lt;br
     * /&gt; After creation, use [PersonGroup Person -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/create) to add persons into
     * the group, and then call [PersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/train) to get this group ready for
     * [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify). &lt;br /&gt; No
     * image will be stored. Only the person's extracted face features and userData will be stored on server until
     * [PersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing person group will use the recognition model that's
     * already associated with the collection. Existing face features in a person group can't be updated to features
     * extracted by another version of recognition model. * 'recognition_01': The default recognition model for
     * [PersonGroup - Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/create). All those
     * person groups created before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'.
     *
     * <p>Person group quota: * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons. *
     * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons. * to handle larger scale
     * face identification problem, please consider using
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponseAsync(
            String personGroupId, String name, String userData, RecognitionModel recognitionModel) {
        MetaDataContract body = new MetaDataContract();
        body.setName(name);
        body.setUserData(userData);
        body.setRecognitionModel(recognitionModel);
        return service.create(this.client.getEndpoint(), personGroupId, body);
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel. &lt;br
     * /&gt; A person group is the container of the uploaded person data, including face recognition features. &lt;br
     * /&gt; After creation, use [PersonGroup Person -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/create) to add persons into
     * the group, and then call [PersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/train) to get this group ready for
     * [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify). &lt;br /&gt; No
     * image will be stored. Only the person's extracted face features and userData will be stored on server until
     * [PersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing person group will use the recognition model that's
     * already associated with the collection. Existing face features in a person group can't be updated to features
     * extracted by another version of recognition model. * 'recognition_01': The default recognition model for
     * [PersonGroup - Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/create). All those
     * person groups created before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'.
     *
     * <p>Person group quota: * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons. *
     * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons. * to handle larger scale
     * face identification problem, please consider using
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> createAsync(
            String personGroupId, String name, String userData, RecognitionModel recognitionModel) {
        return createWithResponseAsync(personGroupId, name, userData, recognitionModel)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel. &lt;br
     * /&gt; A person group is the container of the uploaded person data, including face recognition features. &lt;br
     * /&gt; After creation, use [PersonGroup Person -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/create) to add persons into
     * the group, and then call [PersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/train) to get this group ready for
     * [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify). &lt;br /&gt; No
     * image will be stored. Only the person's extracted face features and userData will be stored on server until
     * [PersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing person group will use the recognition model that's
     * already associated with the collection. Existing face features in a person group can't be updated to features
     * extracted by another version of recognition model. * 'recognition_01': The default recognition model for
     * [PersonGroup - Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/create). All those
     * person groups created before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'.
     *
     * <p>Person group quota: * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons. *
     * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons. * to handle larger scale
     * face identification problem, please consider using
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String personGroupId, String name, String userData, RecognitionModel recognitionModel) {
        createAsync(personGroupId, name, userData, recognitionModel).block();
    }

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String personGroupId) {
        return service.delete(this.client.getEndpoint(), personGroupId);
    }

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String personGroupId) {
        return deleteWithResponseAsync(personGroupId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String personGroupId) {
        deleteAsync(personGroupId).block();
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use
     * [PersonGroup Person - List](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/list).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PersonGroup>> getWithResponseAsync(String personGroupId, Boolean returnRecognitionModel) {
        return service.get(this.client.getEndpoint(), personGroupId, returnRecognitionModel);
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use
     * [PersonGroup Person - List](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/list).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersonGroup> getAsync(String personGroupId, Boolean returnRecognitionModel) {
        return getWithResponseAsync(personGroupId, returnRecognitionModel)
                .flatMap(
                        (Response<PersonGroup> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use
     * [PersonGroup Person - List](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/list).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroup get(String personGroupId, Boolean returnRecognitionModel) {
        return getAsync(personGroupId, returnRecognitionModel).block();
    }

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body
     * will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponseAsync(String personGroupId, String name, String userData) {
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.setName(name);
        body.setUserData(userData);
        return service.update(this.client.getEndpoint(), personGroupId, body);
    }

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body
     * will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAsync(String personGroupId, String name, String userData) {
        return updateWithResponseAsync(personGroupId, name, userData).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body
     * will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String personGroupId, String name, String userData) {
        updateAsync(personGroupId, name, userData).block();
    }

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TrainingStatus>> getTrainingStatusWithResponseAsync(String personGroupId) {
        return service.getTrainingStatus(this.client.getEndpoint(), personGroupId);
    }

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrainingStatus> getTrainingStatusAsync(String personGroupId) {
        return getTrainingStatusWithResponseAsync(personGroupId)
                .flatMap(
                        (Response<TrainingStatus> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrainingStatus getTrainingStatus(String personGroupId) {
        return getTrainingStatusAsync(personGroupId).block();
    }

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt; * Person groups are stored in
     * alphabetical order of personGroupId. * "start" parameter (string, optional) is a user-provided personGroupId
     * value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from
     * the first item. * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
     * entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of
     * the current call. &lt;br /&gt; For example, total 5 person groups: "group1", ..., "group5". &lt;br /&gt;
     * "start=&amp;top=" will return all 5 groups. &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     * &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param start List person groups from the least personGroupId greater than the "start".
     * @param top The number of person groups to list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of person groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<PersonGroup>>> listWithResponseAsync(
            String start, Integer top, Boolean returnRecognitionModel) {
        return service.list(this.client.getEndpoint(), start, top, returnRecognitionModel);
    }

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt; * Person groups are stored in
     * alphabetical order of personGroupId. * "start" parameter (string, optional) is a user-provided personGroupId
     * value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from
     * the first item. * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
     * entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of
     * the current call. &lt;br /&gt; For example, total 5 person groups: "group1", ..., "group5". &lt;br /&gt;
     * "start=&amp;top=" will return all 5 groups. &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     * &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param start List person groups from the least personGroupId greater than the "start".
     * @param top The number of person groups to list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of person groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<PersonGroup>> listAsync(String start, Integer top, Boolean returnRecognitionModel) {
        return listWithResponseAsync(start, top, returnRecognitionModel)
                .flatMap(
                        (Response<List<PersonGroup>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt; * Person groups are stored in
     * alphabetical order of personGroupId. * "start" parameter (string, optional) is a user-provided personGroupId
     * value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from
     * the first item. * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
     * entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of
     * the current call. &lt;br /&gt; For example, total 5 person groups: "group1", ..., "group5". &lt;br /&gt;
     * "start=&amp;top=" will return all 5 groups. &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     * &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param start List person groups from the least personGroupId greater than the "start".
     * @param top The number of person groups to list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of person groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroup> list(String start, Integer top, Boolean returnRecognitionModel) {
        return listAsync(start, top, returnRecognitionModel).block();
    }

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> trainWithResponseAsync(String personGroupId) {
        return service.train(this.client.getEndpoint(), personGroupId);
    }

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> trainAsync(String personGroupId) {
        return trainWithResponseAsync(personGroupId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void train(String personGroupId) {
        trainAsync(personGroupId).block();
    }
}
