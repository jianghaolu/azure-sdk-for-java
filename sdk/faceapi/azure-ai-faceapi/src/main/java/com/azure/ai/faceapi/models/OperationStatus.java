// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The OperationStatus model. */
@Fluent
public final class OperationStatus {
    /*
     * Operation status: notstarted, running, succeeded, failed. If the
     * operation is requested and waiting to perform, the status is notstarted.
     * If the operation is ongoing in backend, the status is running. Status
     * succeeded means the operation is completed successfully, specifically
     * for snapshot taking operation, it illustrates the snapshot is well taken
     * and ready to apply, and for snapshot applying operation, it presents the
     * target object has finished creating by the snapshot and ready to be
     * used. Status failed is often caused by editing the source object while
     * taking the snapshot or editing the target object while applying the
     * snapshot before completion, see the field "message" to check the failure
     * reason.
     */
    @JsonProperty(value = "status", required = true)
    private OperationStatusType status;

    /*
     * A combined UTC date and time string that describes the time when the
     * operation (take or apply a snapshot) is requested. E.g.
     * 2018-12-25T11:41:02.2331413Z.
     */
    @JsonProperty(value = "createdTime", required = true)
    private OffsetDateTime createdTime;

    /*
     * A combined UTC date and time string that describes the last time the
     * operation (take or apply a snapshot) is actively migrating data. The
     * lastActionTime will keep increasing until the operation finishes. E.g.
     * 2018-12-25T11:51:27.8705696Z.
     */
    @JsonProperty(value = "lastActionTime")
    private OffsetDateTime lastActionTime;

    /*
     * When the operation succeeds successfully, for snapshot taking operation
     * the snapshot id will be included in this field, and for snapshot
     * applying operation, the path to get the target object will be returned
     * in this field.
     */
    @JsonProperty(value = "resourceLocation")
    private String resourceLocation;

    /*
     * Show failure message when operation fails (omitted when operation
     * succeeds).
     */
    @JsonProperty(value = "message")
    private String message;

    /**
     * Get the status property: Operation status: notstarted, running, succeeded, failed. If the operation is requested
     * and waiting to perform, the status is notstarted. If the operation is ongoing in backend, the status is running.
     * Status succeeded means the operation is completed successfully, specifically for snapshot taking operation, it
     * illustrates the snapshot is well taken and ready to apply, and for snapshot applying operation, it presents the
     * target object has finished creating by the snapshot and ready to be used. Status failed is often caused by
     * editing the source object while taking the snapshot or editing the target object while applying the snapshot
     * before completion, see the field "message" to check the failure reason.
     *
     * @return the status value.
     */
    public OperationStatusType getStatus() {
        return this.status;
    }

    /**
     * Set the status property: Operation status: notstarted, running, succeeded, failed. If the operation is requested
     * and waiting to perform, the status is notstarted. If the operation is ongoing in backend, the status is running.
     * Status succeeded means the operation is completed successfully, specifically for snapshot taking operation, it
     * illustrates the snapshot is well taken and ready to apply, and for snapshot applying operation, it presents the
     * target object has finished creating by the snapshot and ready to be used. Status failed is often caused by
     * editing the source object while taking the snapshot or editing the target object while applying the snapshot
     * before completion, see the field "message" to check the failure reason.
     *
     * @param status the status value to set.
     * @return the OperationStatus object itself.
     */
    public OperationStatus setStatus(OperationStatusType status) {
        this.status = status;
        return this;
    }

    /**
     * Get the createdTime property: A combined UTC date and time string that describes the time when the operation
     * (take or apply a snapshot) is requested. E.g. 2018-12-25T11:41:02.2331413Z.
     *
     * @return the createdTime value.
     */
    public OffsetDateTime getCreatedTime() {
        return this.createdTime;
    }

    /**
     * Set the createdTime property: A combined UTC date and time string that describes the time when the operation
     * (take or apply a snapshot) is requested. E.g. 2018-12-25T11:41:02.2331413Z.
     *
     * @param createdTime the createdTime value to set.
     * @return the OperationStatus object itself.
     */
    public OperationStatus setCreatedTime(OffsetDateTime createdTime) {
        this.createdTime = createdTime;
        return this;
    }

    /**
     * Get the lastActionTime property: A combined UTC date and time string that describes the last time the operation
     * (take or apply a snapshot) is actively migrating data. The lastActionTime will keep increasing until the
     * operation finishes. E.g. 2018-12-25T11:51:27.8705696Z.
     *
     * @return the lastActionTime value.
     */
    public OffsetDateTime getLastActionTime() {
        return this.lastActionTime;
    }

    /**
     * Set the lastActionTime property: A combined UTC date and time string that describes the last time the operation
     * (take or apply a snapshot) is actively migrating data. The lastActionTime will keep increasing until the
     * operation finishes. E.g. 2018-12-25T11:51:27.8705696Z.
     *
     * @param lastActionTime the lastActionTime value to set.
     * @return the OperationStatus object itself.
     */
    public OperationStatus setLastActionTime(OffsetDateTime lastActionTime) {
        this.lastActionTime = lastActionTime;
        return this;
    }

    /**
     * Get the resourceLocation property: When the operation succeeds successfully, for snapshot taking operation the
     * snapshot id will be included in this field, and for snapshot applying operation, the path to get the target
     * object will be returned in this field.
     *
     * @return the resourceLocation value.
     */
    public String getResourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Set the resourceLocation property: When the operation succeeds successfully, for snapshot taking operation the
     * snapshot id will be included in this field, and for snapshot applying operation, the path to get the target
     * object will be returned in this field.
     *
     * @param resourceLocation the resourceLocation value to set.
     * @return the OperationStatus object itself.
     */
    public OperationStatus setResourceLocation(String resourceLocation) {
        this.resourceLocation = resourceLocation;
        return this;
    }

    /**
     * Get the message property: Show failure message when operation fails (omitted when operation succeeds).
     *
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Set the message property: Show failure message when operation fails (omitted when operation succeeds).
     *
     * @param message the message value to set.
     * @return the OperationStatus object itself.
     */
    public OperationStatus setMessage(String message) {
        this.message = message;
        return this;
    }
}
