// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi.implementation;

import com.azure.ai.faceapi.models.APIErrorException;
import com.azure.ai.faceapi.models.DetectionModel;
import com.azure.ai.faceapi.models.ImageUrl;
import com.azure.ai.faceapi.models.NameAndUserDataContract;
import com.azure.ai.faceapi.models.PersistedFace;
import com.azure.ai.faceapi.models.Person;
import com.azure.ai.faceapi.models.UpdateFaceRequest;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in LargePersonGroupPersons. */
public final class LargePersonGroupPersonsImpl {
    /** The proxy service used to perform REST calls. */
    private final LargePersonGroupPersonsService service;

    /** The service client containing this operation class. */
    private final FaceClientImpl client;

    /**
     * Initializes an instance of LargePersonGroupPersonsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    LargePersonGroupPersonsImpl(FaceClientImpl client) {
        this.service = RestProxy.create(LargePersonGroupPersonsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for FaceClientLargePersonGroupPersons to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{Endpoint}/face/v1.0")
    @ServiceInterface(name = "FaceClientLargePerso")
    private interface LargePersonGroupPersonsService {
        @Post("/largepersongroups/{largePersonGroupId}/persons")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Person>> create(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @BodyParam("application/json") NameAndUserDataContract body);

        @Get("/largepersongroups/{largePersonGroupId}/persons")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<List<Person>>> list(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @QueryParam("start") String start,
                @QueryParam("top") Integer top);

        @Delete("/largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> delete(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @PathParam("personId") UUID personId);

        @Get("/largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Person>> get(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @PathParam("personId") UUID personId);

        @Patch("/largepersongroups/{largePersonGroupId}/persons/{personId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> update(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @PathParam("personId") UUID personId,
                @BodyParam("application/json") NameAndUserDataContract body);

        @Delete("/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> deleteFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @PathParam("personId") UUID personId,
                @PathParam("persistedFaceId") UUID persistedFaceId);

        @Get("/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<PersistedFace>> getFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @PathParam("personId") UUID personId,
                @PathParam("persistedFaceId") UUID persistedFaceId);

        @Patch("/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<Void>> updateFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @PathParam("personId") UUID personId,
                @PathParam("persistedFaceId") UUID persistedFaceId,
                @BodyParam("application/json") UpdateFaceRequest body);

        @Post("/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<PersistedFace>> addFaceFromUrl(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @PathParam("personId") UUID personId,
                @QueryParam("userData") String userData,
                @QueryParam("targetFace") String targetFace,
                @QueryParam("detectionModel") DetectionModel detectionModel,
                @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<PersistedFace>> addFaceFromStream(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largePersonGroupId") String largePersonGroupId,
                @PathParam("personId") UUID personId,
                @QueryParam("userData") String userData,
                @QueryParam("targetFace") String targetFace,
                @QueryParam("detectionModel") DetectionModel detectionModel,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> image,
                @HeaderParam("Content-Length") long contentLength);
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Person>> createWithResponseAsync(String largePersonGroupId, String name, String userData) {
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.setName(name);
        body.setUserData(userData);
        return service.create(this.client.getEndpoint(), largePersonGroupId, body);
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Person> createAsync(String largePersonGroupId, String name, String userData) {
        return createWithResponseAsync(largePersonGroupId, name, userData)
                .flatMap(
                        (Response<Person> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Person create(String largePersonGroupId, String name, String userData) {
        return createAsync(largePersonGroupId, name, userData).block();
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and
     * persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param start Starting person id to return (used to list a range of persons).
     * @param top Number of persons to return starting with the person id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of Persons.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<Person>>> listWithResponseAsync(String largePersonGroupId, String start, Integer top) {
        return service.list(this.client.getEndpoint(), largePersonGroupId, start, top);
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and
     * persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param start Starting person id to return (used to list a range of persons).
     * @param top Number of persons to return starting with the person id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of Persons.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<Person>> listAsync(String largePersonGroupId, String start, Integer top) {
        return listWithResponseAsync(largePersonGroupId, start, top)
                .flatMap(
                        (Response<List<Person>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and
     * persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param start Starting person id to return (used to list a range of persons).
     * @param top Number of persons to return starting with the person id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of Persons.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<Person> list(String largePersonGroupId, String start, Integer top) {
        return listAsync(largePersonGroupId, start, top).block();
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature
     * in the person entry will all be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String largePersonGroupId, UUID personId) {
        return service.delete(this.client.getEndpoint(), largePersonGroupId, personId);
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature
     * in the person entry will all be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String largePersonGroupId, UUID personId) {
        return deleteWithResponseAsync(largePersonGroupId, personId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature
     * in the person entry will all be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String largePersonGroupId, UUID personId) {
        deleteAsync(largePersonGroupId, personId).block();
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Person>> getWithResponseAsync(String largePersonGroupId, UUID personId) {
        return service.get(this.client.getEndpoint(), largePersonGroupId, personId);
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Person> getAsync(String largePersonGroupId, UUID personId) {
        return getWithResponseAsync(largePersonGroupId, personId)
                .flatMap(
                        (Response<Person> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Person get(String largePersonGroupId, UUID personId) {
        return getAsync(largePersonGroupId, personId).block();
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponseAsync(
            String largePersonGroupId, UUID personId, String name, String userData) {
        NameAndUserDataContract body = new NameAndUserDataContract();
        body.setName(name);
        body.setUserData(userData);
        return service.update(this.client.getEndpoint(), largePersonGroupId, personId, body);
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAsync(String largePersonGroupId, UUID personId, String name, String userData) {
        return updateWithResponseAsync(largePersonGroupId, personId, name, userData)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String largePersonGroupId, UUID personId, String name, String userData) {
        updateAsync(largePersonGroupId, personId, name, userData).block();
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and
     * persistedFaceId. &lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially.
     * Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponseAsync(
            String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        return service.deleteFace(this.client.getEndpoint(), largePersonGroupId, personId, persistedFaceId);
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and
     * persistedFaceId. &lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially.
     * Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteFaceAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        return deleteFaceWithResponseAsync(largePersonGroupId, personId, persistedFaceId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and
     * persistedFaceId. &lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially.
     * Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFace(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        deleteFaceAsync(largePersonGroupId, personId, persistedFaceId).block();
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging
     * largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PersistedFace>> getFaceWithResponseAsync(
            String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        return service.getFace(this.client.getEndpoint(), largePersonGroupId, personId, persistedFaceId);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging
     * largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersistedFace> getFaceAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        return getFaceWithResponseAsync(largePersonGroupId, personId, persistedFaceId)
                .flatMap(
                        (Response<PersistedFace> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging
     * largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersistedFace getFace(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        return getFaceAsync(largePersonGroupId, personId, persistedFaceId).block();
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateFaceWithResponseAsync(
            String largePersonGroupId, UUID personId, UUID persistedFaceId, String userData) {
        UpdateFaceRequest body = new UpdateFaceRequest();
        body.setUserData(userData);
        return service.updateFace(this.client.getEndpoint(), largePersonGroupId, personId, persistedFaceId, body);
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateFaceAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId, String userData) {
        return updateFaceWithResponseAsync(largePersonGroupId, personId, persistedFaceId, userData)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateFace(String largePersonGroupId, UUID personId, UUID persistedFaceId, String userData) {
        updateFaceAsync(largePersonGroupId, personId, persistedFaceId, userData).block();
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [LargePersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface),
     * [LargePersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete)
     * is called. &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG,
     * GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. *
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be processed
     * sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum detectable
     * face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than
     * 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be
     * provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargePersonGroup Person - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PersistedFace>> addFaceFromUrlWithResponseAsync(
            String largePersonGroupId,
            UUID personId,
            String url,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        String targetFaceConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(
                this.client.getEndpoint(),
                largePersonGroupId,
                personId,
                userData,
                targetFaceConverted,
                detectionModel,
                imageUrl);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [LargePersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface),
     * [LargePersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete)
     * is called. &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG,
     * GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. *
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be processed
     * sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum detectable
     * face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than
     * 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be
     * provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargePersonGroup Person - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersistedFace> addFaceFromUrlAsync(
            String largePersonGroupId,
            UUID personId,
            String url,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return addFaceFromUrlWithResponseAsync(largePersonGroupId, personId, url, userData, targetFace, detectionModel)
                .flatMap(
                        (Response<PersistedFace> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [LargePersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface),
     * [LargePersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete)
     * is called. &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG,
     * GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. *
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be processed
     * sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum detectable
     * face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than
     * 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be
     * provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargePersonGroup Person - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersistedFace addFaceFromUrl(
            String largePersonGroupId,
            UUID personId,
            String url,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return addFaceFromUrlAsync(largePersonGroupId, personId, url, userData, targetFace, detectionModel).block();
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [LargePersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface),
     * [LargePersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete)
     * is called. &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG,
     * GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. *
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be processed
     * sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum detectable
     * face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than
     * 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be
     * provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargePersonGroup Person - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PersistedFace>> addFaceFromStreamWithResponseAsync(
            String largePersonGroupId,
            UUID personId,
            Flux<ByteBuffer> image,
            long contentLength,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        String targetFaceConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromStream(
                this.client.getEndpoint(),
                largePersonGroupId,
                personId,
                userData,
                targetFaceConverted,
                detectionModel,
                image,
                contentLength);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [LargePersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface),
     * [LargePersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete)
     * is called. &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG,
     * GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. *
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be processed
     * sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum detectable
     * face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than
     * 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be
     * provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargePersonGroup Person - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PersistedFace> addFaceFromStreamAsync(
            String largePersonGroupId,
            UUID personId,
            Flux<ByteBuffer> image,
            long contentLength,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return addFaceFromStreamWithResponseAsync(
                        largePersonGroupId, personId, image, contentLength, userData, targetFace, detectionModel)
                .flatMap(
                        (Response<PersistedFace> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [LargePersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface),
     * [LargePersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete)
     * is called. &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). * Higher face image
     * quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is
     * 200x200 pixels (100 pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG,
     * GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB. *
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the
     * provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to
     * detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose,
     * or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be processed
     * sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum detectable
     * face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than
     * 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values can be
     * provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [LargePersonGroup Person - Add
     * Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl).
     * Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     * occluded faces or wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': |
     * Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace Array of TargetFaceItemsItem.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return personFace object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersistedFace addFaceFromStream(
            String largePersonGroupId,
            UUID personId,
            Flux<ByteBuffer> image,
            long contentLength,
            String userData,
            List<Integer> targetFace,
            DetectionModel detectionModel) {
        return addFaceFromStreamAsync(
                        largePersonGroupId, personId, image, contentLength, userData, targetFace, detectionModel)
                .block();
    }
}
