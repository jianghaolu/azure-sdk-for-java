// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi.implementation;

import com.azure.ai.faceapi.models.APIErrorException;
import com.azure.ai.faceapi.models.DetectedFace;
import com.azure.ai.faceapi.models.DetectionModel;
import com.azure.ai.faceapi.models.FaceAttributeType;
import com.azure.ai.faceapi.models.FindSimilarMatchMode;
import com.azure.ai.faceapi.models.FindSimilarRequest;
import com.azure.ai.faceapi.models.GroupRequest;
import com.azure.ai.faceapi.models.GroupResult;
import com.azure.ai.faceapi.models.IdentifyRequest;
import com.azure.ai.faceapi.models.IdentifyResult;
import com.azure.ai.faceapi.models.ImageUrl;
import com.azure.ai.faceapi.models.RecognitionModel;
import com.azure.ai.faceapi.models.SimilarFace;
import com.azure.ai.faceapi.models.VerifyFaceToFaceRequest;
import com.azure.ai.faceapi.models.VerifyFaceToPersonRequest;
import com.azure.ai.faceapi.models.VerifyResult;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Faces. */
public final class FacesImpl {
    /** The proxy service used to perform REST calls. */
    private final FacesService service;

    /** The service client containing this operation class. */
    private final FaceClientImpl client;

    /**
     * Initializes an instance of FacesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    FacesImpl(FaceClientImpl client) {
        this.service = RestProxy.create(FacesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for FaceClientFaces to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{Endpoint}/face/v1.0")
    @ServiceInterface(name = "FaceClientFaces")
    private interface FacesService {
        @Post("/findsimilars")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<List<SimilarFace>>> findSimilar(
                @HostParam("Endpoint") String endpoint, @BodyParam("application/json") FindSimilarRequest body);

        @Post("/group")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<GroupResult>> group(
                @HostParam("Endpoint") String endpoint, @BodyParam("application/json") GroupRequest body);

        @Post("/identify")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<List<IdentifyResult>>> identify(
                @HostParam("Endpoint") String endpoint, @BodyParam("application/json") IdentifyRequest body);

        @Post("/verify")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<VerifyResult>> verifyFaceToFace(
                @HostParam("Endpoint") String endpoint, @BodyParam("application/json") VerifyFaceToFaceRequest body);

        @Post("/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<List<DetectedFace>>> detectWithUrl(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("returnFaceId") Boolean returnFaceId,
                @QueryParam("returnFaceLandmarks") Boolean returnFaceLandmarks,
                @QueryParam("returnFaceAttributes") String returnFaceAttributes,
                @QueryParam("recognitionModel") RecognitionModel recognitionModel,
                @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel,
                @QueryParam("detectionModel") DetectionModel detectionModel,
                @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/verify")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<VerifyResult>> verifyFaceToPerson(
                @HostParam("Endpoint") String endpoint, @BodyParam("application/json") VerifyFaceToPersonRequest body);

        @Post("/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(APIErrorException.class)
        Mono<Response<List<DetectedFace>>> detectWithStream(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("returnFaceId") Boolean returnFaceId,
                @QueryParam("returnFaceLandmarks") Boolean returnFaceLandmarks,
                @QueryParam("returnFaceAttributes") String returnFaceAttributes,
                @QueryParam("recognitionModel") RecognitionModel recognitionModel,
                @QueryParam("returnRecognitionModel") Boolean returnRecognitionModel,
                @QueryParam("detectionModel") DetectionModel detectionModel,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> image,
                @HeaderParam("Content-Length") long contentLength);
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list. faceId array contains the faces created by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), which will expire 24
     * hours after creation. A "faceListId" is created by [FaceList -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create) containing persistedFaceIds
     * that will not expire. And a "largeFaceListId" is created by [LargeFaceList -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create) containing
     * persistedFaceIds that will also not expire. Depending on the input the returned similar faces list contains
     * faceIds or persistedFaceIds ranked by similarity. &lt;br/&gt;Find similar has two working modes, "matchPerson"
     * and "matchFace". "matchPerson" is the default mode that it tries to find faces of the same person as possible by
     * using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty
     * list will be returned if no faces pass the internal thresholds. "matchFace" mode ignores same-person thresholds
     * and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching
     * celebrity-looking faces. &lt;br/&gt;The 'recognitionModel' associated with the query face's faceId should be the
     * same as the 'recognitionModel' used by the target faceId array, face list or large face list.
     *
     * @param faceId FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that
     *     this faceId is not persisted and will expire 24 hours after the detection call.
     * @param faceListId An existing user-specified unique candidate face list, created in Face List - Create a Face
     *     List. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter
     *     faceListId, largeFaceListId and faceIds should not be provided at the same time.
     * @param largeFaceListId An existing user-specified unique candidate large face list, created in LargeFaceList -
     *     Create. Large face list contains a set of persistedFaceIds which are persisted and will never expire.
     *     Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.
     * @param faceIds An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will
     *     expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter faceListId,
     *     largeFaceListId and faceIds should not be provided at the same time.
     * @param maxNumOfCandidatesReturned The number of top similar faces returned. The valid range is [1, 1000].
     * @param mode Similar face searching mode. It can be "matchPerson" or "matchFace".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of SimilarFace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<SimilarFace>>> findSimilarWithResponseAsync(
            UUID faceId,
            String faceListId,
            String largeFaceListId,
            List<UUID> faceIds,
            Integer maxNumOfCandidatesReturned,
            FindSimilarMatchMode mode) {
        FindSimilarRequest body = new FindSimilarRequest();
        body.setFaceId(faceId);
        body.setFaceListId(faceListId);
        body.setLargeFaceListId(largeFaceListId);
        body.setFaceIds(faceIds);
        body.setMaxNumOfCandidatesReturned(maxNumOfCandidatesReturned);
        body.setMode(mode);
        return service.findSimilar(this.client.getEndpoint(), body);
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list. faceId array contains the faces created by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), which will expire 24
     * hours after creation. A "faceListId" is created by [FaceList -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create) containing persistedFaceIds
     * that will not expire. And a "largeFaceListId" is created by [LargeFaceList -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create) containing
     * persistedFaceIds that will also not expire. Depending on the input the returned similar faces list contains
     * faceIds or persistedFaceIds ranked by similarity. &lt;br/&gt;Find similar has two working modes, "matchPerson"
     * and "matchFace". "matchPerson" is the default mode that it tries to find faces of the same person as possible by
     * using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty
     * list will be returned if no faces pass the internal thresholds. "matchFace" mode ignores same-person thresholds
     * and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching
     * celebrity-looking faces. &lt;br/&gt;The 'recognitionModel' associated with the query face's faceId should be the
     * same as the 'recognitionModel' used by the target faceId array, face list or large face list.
     *
     * @param faceId FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that
     *     this faceId is not persisted and will expire 24 hours after the detection call.
     * @param faceListId An existing user-specified unique candidate face list, created in Face List - Create a Face
     *     List. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter
     *     faceListId, largeFaceListId and faceIds should not be provided at the same time.
     * @param largeFaceListId An existing user-specified unique candidate large face list, created in LargeFaceList -
     *     Create. Large face list contains a set of persistedFaceIds which are persisted and will never expire.
     *     Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.
     * @param faceIds An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will
     *     expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter faceListId,
     *     largeFaceListId and faceIds should not be provided at the same time.
     * @param maxNumOfCandidatesReturned The number of top similar faces returned. The valid range is [1, 1000].
     * @param mode Similar face searching mode. It can be "matchPerson" or "matchFace".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of SimilarFace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<SimilarFace>> findSimilarAsync(
            UUID faceId,
            String faceListId,
            String largeFaceListId,
            List<UUID> faceIds,
            Integer maxNumOfCandidatesReturned,
            FindSimilarMatchMode mode) {
        return findSimilarWithResponseAsync(
                        faceId, faceListId, largeFaceListId, faceIds, maxNumOfCandidatesReturned, mode)
                .flatMap(
                        (Response<List<SimilarFace>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face
     * list. faceId array contains the faces created by [Face -
     * Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), which will expire 24
     * hours after creation. A "faceListId" is created by [FaceList -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create) containing persistedFaceIds
     * that will not expire. And a "largeFaceListId" is created by [LargeFaceList -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create) containing
     * persistedFaceIds that will also not expire. Depending on the input the returned similar faces list contains
     * faceIds or persistedFaceIds ranked by similarity. &lt;br/&gt;Find similar has two working modes, "matchPerson"
     * and "matchFace". "matchPerson" is the default mode that it tries to find faces of the same person as possible by
     * using internal same-person thresholds. It is useful to find a known person's other photos. Note that an empty
     * list will be returned if no faces pass the internal thresholds. "matchFace" mode ignores same-person thresholds
     * and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching
     * celebrity-looking faces. &lt;br/&gt;The 'recognitionModel' associated with the query face's faceId should be the
     * same as the 'recognitionModel' used by the target faceId array, face list or large face list.
     *
     * @param faceId FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that
     *     this faceId is not persisted and will expire 24 hours after the detection call.
     * @param faceListId An existing user-specified unique candidate face list, created in Face List - Create a Face
     *     List. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter
     *     faceListId, largeFaceListId and faceIds should not be provided at the same time.
     * @param largeFaceListId An existing user-specified unique candidate large face list, created in LargeFaceList -
     *     Create. Large face list contains a set of persistedFaceIds which are persisted and will never expire.
     *     Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.
     * @param faceIds An array of candidate faceIds. All of them are created by Face - Detect and the faceIds will
     *     expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter faceListId,
     *     largeFaceListId and faceIds should not be provided at the same time.
     * @param maxNumOfCandidatesReturned The number of top similar faces returned. The valid range is [1, 1000].
     * @param mode Similar face searching mode. It can be "matchPerson" or "matchFace".
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of SimilarFace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<SimilarFace> findSimilar(
            UUID faceId,
            String faceListId,
            String largeFaceListId,
            List<UUID> faceIds,
            Integer maxNumOfCandidatesReturned,
            FindSimilarMatchMode mode) {
        return findSimilarAsync(faceId, faceListId, largeFaceListId, faceIds, maxNumOfCandidatesReturned, mode).block();
    }

    /**
     * Divide candidate faces into groups based on face similarity.&lt;br /&gt; * The output is one or more disjointed
     * face groups and a messyGroup. A face group contains faces that have similar looking, often of the same person.
     * Face groups are ranked by group size, i.e. number of faces. Notice that faces belonging to a same person might be
     * split into several groups in the result. * MessyGroup is a special face group containing faces that cannot find
     * any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces found
     * their counterparts. * Group API needs at least 2 candidate faces and 1000 at most. We suggest to try [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface) when you only have 2
     * candidate faces. * The 'recognitionModel' associated with the query faces' faceIds should be the same.
     *
     * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of face groups based on face similarity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GroupResult>> groupWithResponseAsync(List<UUID> faceIds) {
        GroupRequest body = new GroupRequest();
        body.setFaceIds(faceIds);
        return service.group(this.client.getEndpoint(), body);
    }

    /**
     * Divide candidate faces into groups based on face similarity.&lt;br /&gt; * The output is one or more disjointed
     * face groups and a messyGroup. A face group contains faces that have similar looking, often of the same person.
     * Face groups are ranked by group size, i.e. number of faces. Notice that faces belonging to a same person might be
     * split into several groups in the result. * MessyGroup is a special face group containing faces that cannot find
     * any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces found
     * their counterparts. * Group API needs at least 2 candidate faces and 1000 at most. We suggest to try [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface) when you only have 2
     * candidate faces. * The 'recognitionModel' associated with the query faces' faceIds should be the same.
     *
     * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of face groups based on face similarity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GroupResult> groupAsync(List<UUID> faceIds) {
        return groupWithResponseAsync(faceIds)
                .flatMap(
                        (Response<GroupResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Divide candidate faces into groups based on face similarity.&lt;br /&gt; * The output is one or more disjointed
     * face groups and a messyGroup. A face group contains faces that have similar looking, often of the same person.
     * Face groups are ranked by group size, i.e. number of faces. Notice that faces belonging to a same person might be
     * split into several groups in the result. * MessyGroup is a special face group containing faces that cannot find
     * any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces found
     * their counterparts. * Group API needs at least 2 candidate faces and 1000 at most. We suggest to try [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface) when you only have 2
     * candidate faces. * The 'recognitionModel' associated with the query faces' faceIds should be the same.
     *
     * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of face groups based on face similarity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupResult group(List<UUID> faceIds) {
        return groupAsync(faceIds).block();
    }

    /**
     * 1-to-many identification to find the closest matches of the specific query person face from a person group or
     * large person group. &lt;br/&gt; For each face in the faceIds array, Face Identify will compute similarities
     * between the query face and all the faces in the person group (given by personGroupId) or large person group
     * (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence. The
     * person group/large person group should be trained to make it ready for identification. See more in [PersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/train) and [LargePersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/train). &lt;br/&gt;
     *
     * <p>Remarks:&lt;br /&gt; * The algorithm allows more than one face to be identified independently at the same
     * request, but no more than 10 faces. * Each person in the person group/large person group could have more than one
     * face, but no more than 248 faces. * Higher face image quality means better identification precision. Please
     * consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person
     * is identified, the returned candidates will be an empty array. * Try [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar) when you need to find
     * similar faces from a face list/large face list instead of a person group/large person group. * The
     * 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by
     * the target person group or large person group.
     *
     * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
     *     independently. The valid number of faceIds is between [1, 10].
     * @param personGroupId PersonGroupId of the target person group, created by PersonGroup - Create. Parameter
     *     personGroupId and largePersonGroupId should not be provided at the same time.
     * @param largePersonGroupId LargePersonGroupId of the target large person group, created by LargePersonGroup -
     *     Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.
     * @param maxNumOfCandidatesReturned The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
     * @param confidenceThreshold A number ranging from 0 to 1 indicating a level of confidence associated with a
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of IdentifyResult.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<IdentifyResult>>> identifyWithResponseAsync(
            List<UUID> faceIds,
            String personGroupId,
            String largePersonGroupId,
            Integer maxNumOfCandidatesReturned,
            Float confidenceThreshold) {
        IdentifyRequest body = new IdentifyRequest();
        body.setFaceIds(faceIds);
        body.setPersonGroupId(personGroupId);
        body.setLargePersonGroupId(largePersonGroupId);
        body.setMaxNumOfCandidatesReturned(maxNumOfCandidatesReturned);
        body.setConfidenceThreshold(confidenceThreshold);
        return service.identify(this.client.getEndpoint(), body);
    }

    /**
     * 1-to-many identification to find the closest matches of the specific query person face from a person group or
     * large person group. &lt;br/&gt; For each face in the faceIds array, Face Identify will compute similarities
     * between the query face and all the faces in the person group (given by personGroupId) or large person group
     * (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence. The
     * person group/large person group should be trained to make it ready for identification. See more in [PersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/train) and [LargePersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/train). &lt;br/&gt;
     *
     * <p>Remarks:&lt;br /&gt; * The algorithm allows more than one face to be identified independently at the same
     * request, but no more than 10 faces. * Each person in the person group/large person group could have more than one
     * face, but no more than 248 faces. * Higher face image quality means better identification precision. Please
     * consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person
     * is identified, the returned candidates will be an empty array. * Try [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar) when you need to find
     * similar faces from a face list/large face list instead of a person group/large person group. * The
     * 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by
     * the target person group or large person group.
     *
     * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
     *     independently. The valid number of faceIds is between [1, 10].
     * @param personGroupId PersonGroupId of the target person group, created by PersonGroup - Create. Parameter
     *     personGroupId and largePersonGroupId should not be provided at the same time.
     * @param largePersonGroupId LargePersonGroupId of the target large person group, created by LargePersonGroup -
     *     Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.
     * @param maxNumOfCandidatesReturned The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
     * @param confidenceThreshold A number ranging from 0 to 1 indicating a level of confidence associated with a
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of IdentifyResult.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<IdentifyResult>> identifyAsync(
            List<UUID> faceIds,
            String personGroupId,
            String largePersonGroupId,
            Integer maxNumOfCandidatesReturned,
            Float confidenceThreshold) {
        return identifyWithResponseAsync(
                        faceIds, personGroupId, largePersonGroupId, maxNumOfCandidatesReturned, confidenceThreshold)
                .flatMap(
                        (Response<List<IdentifyResult>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * 1-to-many identification to find the closest matches of the specific query person face from a person group or
     * large person group. &lt;br/&gt; For each face in the faceIds array, Face Identify will compute similarities
     * between the query face and all the faces in the person group (given by personGroupId) or large person group
     * (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence. The
     * person group/large person group should be trained to make it ready for identification. See more in [PersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/train) and [LargePersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/train). &lt;br/&gt;
     *
     * <p>Remarks:&lt;br /&gt; * The algorithm allows more than one face to be identified independently at the same
     * request, but no more than 10 faces. * Each person in the person group/large person group could have more than one
     * face, but no more than 248 faces. * Higher face image quality means better identification precision. Please
     * consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * * Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person
     * is identified, the returned candidates will be an empty array. * Try [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar) when you need to find
     * similar faces from a face list/large face list instead of a person group/large person group. * The
     * 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by
     * the target person group or large person group.
     *
     * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified
     *     independently. The valid number of faceIds is between [1, 10].
     * @param personGroupId PersonGroupId of the target person group, created by PersonGroup - Create. Parameter
     *     personGroupId and largePersonGroupId should not be provided at the same time.
     * @param largePersonGroupId LargePersonGroupId of the target large person group, created by LargePersonGroup -
     *     Create. Parameter personGroupId and largePersonGroupId should not be provided at the same time.
     * @param maxNumOfCandidatesReturned The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
     * @param confidenceThreshold A number ranging from 0 to 1 indicating a level of confidence associated with a
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of IdentifyResult.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<IdentifyResult> identify(
            List<UUID> faceIds,
            String personGroupId,
            String largePersonGroupId,
            Integer maxNumOfCandidatesReturned,
            Float confidenceThreshold) {
        return identifyAsync(
                        faceIds, personGroupId, largePersonGroupId, maxNumOfCandidatesReturned, confidenceThreshold)
                .block();
    }

    /**
     * Verify whether two faces belong to a same person or whether one face belongs to a person. &lt;br/&gt;
     * Remarks:&lt;br /&gt; * Higher face image quality means better identification precision. Please consider
     * high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. * For
     * the scenarios that are sensitive to accuracy please make your own judgment. * The 'recognitionModel' associated
     * with the query faces' faceIds should be the same as the 'recognitionModel' used by the target face, person group
     * or large person group.
     *
     * @param faceId1 FaceId of the first face, comes from Face - Detect.
     * @param faceId2 FaceId of the second face, comes from Face - Detect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the verify operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VerifyResult>> verifyFaceToFaceWithResponseAsync(UUID faceId1, UUID faceId2) {
        VerifyFaceToFaceRequest body = new VerifyFaceToFaceRequest();
        body.setFaceId1(faceId1);
        body.setFaceId2(faceId2);
        return service.verifyFaceToFace(this.client.getEndpoint(), body);
    }

    /**
     * Verify whether two faces belong to a same person or whether one face belongs to a person. &lt;br/&gt;
     * Remarks:&lt;br /&gt; * Higher face image quality means better identification precision. Please consider
     * high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. * For
     * the scenarios that are sensitive to accuracy please make your own judgment. * The 'recognitionModel' associated
     * with the query faces' faceIds should be the same as the 'recognitionModel' used by the target face, person group
     * or large person group.
     *
     * @param faceId1 FaceId of the first face, comes from Face - Detect.
     * @param faceId2 FaceId of the second face, comes from Face - Detect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the verify operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VerifyResult> verifyFaceToFaceAsync(UUID faceId1, UUID faceId2) {
        return verifyFaceToFaceWithResponseAsync(faceId1, faceId2)
                .flatMap(
                        (Response<VerifyResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Verify whether two faces belong to a same person or whether one face belongs to a person. &lt;br/&gt;
     * Remarks:&lt;br /&gt; * Higher face image quality means better identification precision. Please consider
     * high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger. * For
     * the scenarios that are sensitive to accuracy please make your own judgment. * The 'recognitionModel' associated
     * with the query faces' faceIds should be the same as the 'recognitionModel' used by the target face, person group
     * or large person group.
     *
     * @param faceId1 FaceId of the first face, comes from Face - Detect.
     * @param faceId2 FaceId of the second face, comes from Face - Detect.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the verify operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VerifyResult verifyFaceToFace(UUID faceId1, UUID faceId2) {
        return verifyFaceToFaceAsync(faceId1, faceId2).block();
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and
     * attributes.&lt;br /&gt; * No image will be stored. Only the extracted face feature will be stored on server. The
     * faceId is an identifier of the face feature and will be used in [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). The stored face feature(s)
     * will expire and be deleted 24 hours after the original detection call. * Optional parameters include faceId,
     * landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair,
     * makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes
     * may not be highly accurate. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image
     * file size is from 1KB to 6MB. * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle
     * size from large to small. * For optimal results when querying [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar) ('returnFaceId' is true),
     * please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes). *
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different
     * 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to
     * specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>* Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find
     * Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for
     * 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in
     * this parameter. Once specified, the detected faceIds will be associated with the specified recognition model.
     * More details, please refer to [How to specify a recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
     * | Model | Recommended use-case(s) | | ---------- | -------- | | 'recognition_01': | The default recognition model
     * for [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). All those
     * faceIds created before 2019 March are bonded with this recognition model. | | 'recognition_02': | Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'. |.
     *
     * @param url Publicly reachable URL of an image.
     * @param returnFaceId A value indicating whether the operation should return faceIds of detected faces.
     * @param returnFaceLandmarks A value indicating whether the operation should return landmarks of the detected
     *     faces.
     * @param returnFaceAttributes Array of FaceAttributeType.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of DetectedFace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<DetectedFace>>> detectWithUrlWithResponseAsync(
            String url,
            Boolean returnFaceId,
            Boolean returnFaceLandmarks,
            List<FaceAttributeType> returnFaceAttributes,
            RecognitionModel recognitionModel,
            Boolean returnRecognitionModel,
            DetectionModel detectionModel) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        String returnFaceAttributesConverted =
                JacksonAdapter.createDefaultSerializerAdapter()
                        .serializeList(returnFaceAttributes, CollectionFormat.CSV);
        return service.detectWithUrl(
                this.client.getEndpoint(),
                returnFaceId,
                returnFaceLandmarks,
                returnFaceAttributesConverted,
                recognitionModel,
                returnRecognitionModel,
                detectionModel,
                imageUrl);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and
     * attributes.&lt;br /&gt; * No image will be stored. Only the extracted face feature will be stored on server. The
     * faceId is an identifier of the face feature and will be used in [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). The stored face feature(s)
     * will expire and be deleted 24 hours after the original detection call. * Optional parameters include faceId,
     * landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair,
     * makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes
     * may not be highly accurate. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image
     * file size is from 1KB to 6MB. * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle
     * size from large to small. * For optimal results when querying [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar) ('returnFaceId' is true),
     * please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes). *
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different
     * 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to
     * specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>* Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find
     * Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for
     * 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in
     * this parameter. Once specified, the detected faceIds will be associated with the specified recognition model.
     * More details, please refer to [How to specify a recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
     * | Model | Recommended use-case(s) | | ---------- | -------- | | 'recognition_01': | The default recognition model
     * for [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). All those
     * faceIds created before 2019 March are bonded with this recognition model. | | 'recognition_02': | Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'. |.
     *
     * @param url Publicly reachable URL of an image.
     * @param returnFaceId A value indicating whether the operation should return faceIds of detected faces.
     * @param returnFaceLandmarks A value indicating whether the operation should return landmarks of the detected
     *     faces.
     * @param returnFaceAttributes Array of FaceAttributeType.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of DetectedFace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<DetectedFace>> detectWithUrlAsync(
            String url,
            Boolean returnFaceId,
            Boolean returnFaceLandmarks,
            List<FaceAttributeType> returnFaceAttributes,
            RecognitionModel recognitionModel,
            Boolean returnRecognitionModel,
            DetectionModel detectionModel) {
        return detectWithUrlWithResponseAsync(
                        url,
                        returnFaceId,
                        returnFaceLandmarks,
                        returnFaceAttributes,
                        recognitionModel,
                        returnRecognitionModel,
                        detectionModel)
                .flatMap(
                        (Response<List<DetectedFace>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and
     * attributes.&lt;br /&gt; * No image will be stored. Only the extracted face feature will be stored on server. The
     * faceId is an identifier of the face feature and will be used in [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). The stored face feature(s)
     * will expire and be deleted 24 hours after the original detection call. * Optional parameters include faceId,
     * landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair,
     * makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes
     * may not be highly accurate. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image
     * file size is from 1KB to 6MB. * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle
     * size from large to small. * For optimal results when querying [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar) ('returnFaceId' is true),
     * please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes). *
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different
     * 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to
     * specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>* Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find
     * Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for
     * 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in
     * this parameter. Once specified, the detected faceIds will be associated with the specified recognition model.
     * More details, please refer to [How to specify a recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
     * | Model | Recommended use-case(s) | | ---------- | -------- | | 'recognition_01': | The default recognition model
     * for [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). All those
     * faceIds created before 2019 March are bonded with this recognition model. | | 'recognition_02': | Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'. |.
     *
     * @param url Publicly reachable URL of an image.
     * @param returnFaceId A value indicating whether the operation should return faceIds of detected faces.
     * @param returnFaceLandmarks A value indicating whether the operation should return landmarks of the detected
     *     faces.
     * @param returnFaceAttributes Array of FaceAttributeType.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of DetectedFace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<DetectedFace> detectWithUrl(
            String url,
            Boolean returnFaceId,
            Boolean returnFaceLandmarks,
            List<FaceAttributeType> returnFaceAttributes,
            RecognitionModel recognitionModel,
            Boolean returnRecognitionModel,
            DetectionModel detectionModel) {
        return detectWithUrlAsync(
                        url,
                        returnFaceId,
                        returnFaceLandmarks,
                        returnFaceAttributes,
                        recognitionModel,
                        returnRecognitionModel,
                        detectionModel)
                .block();
    }

    /**
     * Verify whether two faces belong to a same person. Compares a face Id with a Person Id.
     *
     * @param faceId FaceId of the face, comes from Face - Detect.
     * @param personId Specify a certain person in a person group or a large person group. personId is created in
     *     PersonGroup Person - Create or LargePersonGroup Person - Create.
     * @param personGroupId Using existing personGroupId and personId for fast loading a specified person. personGroupId
     *     is created in PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at
     *     the same time.
     * @param largePersonGroupId Using existing largePersonGroupId and personId for fast loading a specified person.
     *     largePersonGroupId is created in LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId
     *     should not be provided at the same time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the verify operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<VerifyResult>> verifyFaceToPersonWithResponseAsync(
            UUID faceId, UUID personId, String personGroupId, String largePersonGroupId) {
        VerifyFaceToPersonRequest body = new VerifyFaceToPersonRequest();
        body.setFaceId(faceId);
        body.setPersonGroupId(personGroupId);
        body.setLargePersonGroupId(largePersonGroupId);
        body.setPersonId(personId);
        return service.verifyFaceToPerson(this.client.getEndpoint(), body);
    }

    /**
     * Verify whether two faces belong to a same person. Compares a face Id with a Person Id.
     *
     * @param faceId FaceId of the face, comes from Face - Detect.
     * @param personId Specify a certain person in a person group or a large person group. personId is created in
     *     PersonGroup Person - Create or LargePersonGroup Person - Create.
     * @param personGroupId Using existing personGroupId and personId for fast loading a specified person. personGroupId
     *     is created in PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at
     *     the same time.
     * @param largePersonGroupId Using existing largePersonGroupId and personId for fast loading a specified person.
     *     largePersonGroupId is created in LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId
     *     should not be provided at the same time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the verify operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VerifyResult> verifyFaceToPersonAsync(
            UUID faceId, UUID personId, String personGroupId, String largePersonGroupId) {
        return verifyFaceToPersonWithResponseAsync(faceId, personId, personGroupId, largePersonGroupId)
                .flatMap(
                        (Response<VerifyResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Verify whether two faces belong to a same person. Compares a face Id with a Person Id.
     *
     * @param faceId FaceId of the face, comes from Face - Detect.
     * @param personId Specify a certain person in a person group or a large person group. personId is created in
     *     PersonGroup Person - Create or LargePersonGroup Person - Create.
     * @param personGroupId Using existing personGroupId and personId for fast loading a specified person. personGroupId
     *     is created in PersonGroup - Create. Parameter personGroupId and largePersonGroupId should not be provided at
     *     the same time.
     * @param largePersonGroupId Using existing largePersonGroupId and personId for fast loading a specified person.
     *     largePersonGroupId is created in LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId
     *     should not be provided at the same time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the verify operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VerifyResult verifyFaceToPerson(
            UUID faceId, UUID personId, String personGroupId, String largePersonGroupId) {
        return verifyFaceToPersonAsync(faceId, personId, personGroupId, largePersonGroupId).block();
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and
     * attributes.&lt;br /&gt; * No image will be stored. Only the extracted face feature will be stored on server. The
     * faceId is an identifier of the face feature and will be used in [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). The stored face feature(s)
     * will expire and be deleted 24 hours after the original detection call. * Optional parameters include faceId,
     * landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair,
     * makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes
     * may not be highly accurate. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image
     * file size is from 1KB to 6MB. * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle
     * size from large to small. * For optimal results when querying [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar) ('returnFaceId' is true),
     * please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes). *
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different
     * 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to
     * specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>* Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find
     * Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for
     * 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in
     * this parameter. Once specified, the detected faceIds will be associated with the specified recognition model.
     * More details, please refer to [How to specify a recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
     * | Model | Recommended use-case(s) | | ---------- | -------- | | 'recognition_01': | The default recognition model
     * for [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). All those
     * faceIds created before 2019 March are bonded with this recognition model. | | 'recognition_02': | Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'. |.
     *
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param returnFaceId A value indicating whether the operation should return faceIds of detected faces.
     * @param returnFaceLandmarks A value indicating whether the operation should return landmarks of the detected
     *     faces.
     * @param returnFaceAttributes Array of FaceAttributeType.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of DetectedFace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<DetectedFace>>> detectWithStreamWithResponseAsync(
            Flux<ByteBuffer> image,
            long contentLength,
            Boolean returnFaceId,
            Boolean returnFaceLandmarks,
            List<FaceAttributeType> returnFaceAttributes,
            RecognitionModel recognitionModel,
            Boolean returnRecognitionModel,
            DetectionModel detectionModel) {
        String returnFaceAttributesConverted =
                JacksonAdapter.createDefaultSerializerAdapter()
                        .serializeList(returnFaceAttributes, CollectionFormat.CSV);
        return service.detectWithStream(
                this.client.getEndpoint(),
                returnFaceId,
                returnFaceLandmarks,
                returnFaceAttributesConverted,
                recognitionModel,
                returnRecognitionModel,
                detectionModel,
                image,
                contentLength);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and
     * attributes.&lt;br /&gt; * No image will be stored. Only the extracted face feature will be stored on server. The
     * faceId is an identifier of the face feature and will be used in [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). The stored face feature(s)
     * will expire and be deleted 24 hours after the original detection call. * Optional parameters include faceId,
     * landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair,
     * makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes
     * may not be highly accurate. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image
     * file size is from 1KB to 6MB. * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle
     * size from large to small. * For optimal results when querying [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar) ('returnFaceId' is true),
     * please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes). *
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different
     * 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to
     * specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>* Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find
     * Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for
     * 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in
     * this parameter. Once specified, the detected faceIds will be associated with the specified recognition model.
     * More details, please refer to [How to specify a recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
     * | Model | Recommended use-case(s) | | ---------- | -------- | | 'recognition_01': | The default recognition model
     * for [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). All those
     * faceIds created before 2019 March are bonded with this recognition model. | | 'recognition_02': | Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'. |.
     *
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param returnFaceId A value indicating whether the operation should return faceIds of detected faces.
     * @param returnFaceLandmarks A value indicating whether the operation should return landmarks of the detected
     *     faces.
     * @param returnFaceAttributes Array of FaceAttributeType.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of DetectedFace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<DetectedFace>> detectWithStreamAsync(
            Flux<ByteBuffer> image,
            long contentLength,
            Boolean returnFaceId,
            Boolean returnFaceLandmarks,
            List<FaceAttributeType> returnFaceAttributes,
            RecognitionModel recognitionModel,
            Boolean returnRecognitionModel,
            DetectionModel detectionModel) {
        return detectWithStreamWithResponseAsync(
                        image,
                        contentLength,
                        returnFaceId,
                        returnFaceLandmarks,
                        returnFaceAttributes,
                        recognitionModel,
                        returnRecognitionModel,
                        detectionModel)
                .flatMap(
                        (Response<List<DetectedFace>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and
     * attributes.&lt;br /&gt; * No image will be stored. Only the extracted face feature will be stored on server. The
     * faceId is an identifier of the face feature and will be used in [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). The stored face feature(s)
     * will expire and be deleted 24 hours after the original detection call. * Optional parameters include faceId,
     * landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair,
     * makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes
     * may not be highly accurate. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image
     * file size is from 1KB to 6MB. * Up to 100 faces can be returned for an image. Faces are ranked by face rectangle
     * size from large to small. * For optimal results when querying [Face -
     * Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify), [Face -
     * Verify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/verifyfacetoface), and [Face - Find
     * Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar) ('returnFaceId' is true),
     * please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes). *
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     * dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size. * Different
     * 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to
     * specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model) |
     * Model | Recommended use-case(s) | | ---------- | -------- | | 'detection_01': | The default detection model for
     * [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). Recommend for
     * near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or
     * wrong image orientation, the faces in such cases may not be detected. | | 'detection_02': | Detection model
     * released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     *
     * <p>* Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find
     * Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for
     * 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in
     * this parameter. Once specified, the detected faceIds will be associated with the specified recognition model.
     * More details, please refer to [How to specify a recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
     * | Model | Recommended use-case(s) | | ---------- | -------- | | 'recognition_01': | The default recognition model
     * for [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl). All those
     * faceIds created before 2019 March are bonded with this recognition model. | | 'recognition_02': | Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'. |.
     *
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param returnFaceId A value indicating whether the operation should return faceIds of detected faces.
     * @param returnFaceLandmarks A value indicating whether the operation should return landmarks of the detected
     *     faces.
     * @param returnFaceAttributes Array of FaceAttributeType.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A
     *     detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or
     *     (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please
     *     explicitly specify it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of DetectedFace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<DetectedFace> detectWithStream(
            Flux<ByteBuffer> image,
            long contentLength,
            Boolean returnFaceId,
            Boolean returnFaceLandmarks,
            List<FaceAttributeType> returnFaceAttributes,
            RecognitionModel recognitionModel,
            Boolean returnRecognitionModel,
            DetectionModel detectionModel) {
        return detectWithStreamAsync(
                        image,
                        contentLength,
                        returnFaceId,
                        returnFaceLandmarks,
                        returnFaceAttributes,
                        recognitionModel,
                        returnRecognitionModel,
                        detectionModel)
                .block();
    }
}
