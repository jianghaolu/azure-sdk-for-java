// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.faceapi;

import com.azure.ai.faceapi.implementation.PersonGroupsImpl;
import com.azure.ai.faceapi.models.APIErrorException;
import com.azure.ai.faceapi.models.PersonGroup;
import com.azure.ai.faceapi.models.RecognitionModel;
import com.azure.ai.faceapi.models.TrainingStatus;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import java.util.List;

/** Initializes a new instance of the synchronous FaceClient type. */
@ServiceClient(builder = FaceClientBuilder.class)
public final class PersonGroupClient {
    private PersonGroupsImpl serviceClient;

    /** Initializes an instance of PersonGroups client. */
    PersonGroupClient(PersonGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel. &lt;br
     * /&gt; A person group is the container of the uploaded person data, including face recognition features. &lt;br
     * /&gt; After creation, use [PersonGroup Person -
     * Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/create) to add persons into
     * the group, and then call [PersonGroup -
     * Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/train) to get this group ready for
     * [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify). &lt;br /&gt; No
     * image will be stored. Only the person's extracted face features and userData will be stored on server until
     * [PersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing person group will use the recognition model that's
     * already associated with the collection. Existing face features in a person group can't be updated to features
     * extracted by another version of recognition model. * 'recognition_01': The default recognition model for
     * [PersonGroup - Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/create). All those
     * person groups created before 2019 March are bonded with this recognition model. * 'recognition_02': Recognition
     * model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared
     * with 'recognition_01'.
     *
     * <p>Person group quota: * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons. *
     * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons. * to handle larger scale
     * face identification problem, please consider using
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Name of recognition model. Recognition model is used when the face features are extracted
     *     and associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model name can be
     *     provided when performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup - Create. The
     *     default value is 'recognition_01', if latest model needed, please explicitly specify the model you need.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String personGroupId, String name, String userData, RecognitionModel recognitionModel) {
        this.serviceClient.create(personGroupId, name, userData, recognitionModel);
    }

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String personGroupId) {
        this.serviceClient.delete(personGroupId);
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use
     * [PersonGroup Person - List](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/list).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return person group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PersonGroup get(String personGroupId, Boolean returnRecognitionModel) {
        return this.serviceClient.get(personGroupId, returnRecognitionModel);
    }

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body
     * will not be updated.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String personGroupId, String name, String userData) {
        this.serviceClient.update(personGroupId, name, userData);
    }

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training status object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrainingStatus getTrainingStatus(String personGroupId) {
        return this.serviceClient.getTrainingStatus(personGroupId);
    }

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt; * Person groups are stored in
     * alphabetical order of personGroupId. * "start" parameter (string, optional) is a user-provided personGroupId
     * value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from
     * the first item. * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
     * entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of
     * the current call. &lt;br /&gt; For example, total 5 person groups: "group1", ..., "group5". &lt;br /&gt;
     * "start=&amp;top=" will return all 5 groups. &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     * &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param start List person groups from the least personGroupId greater than the "start".
     * @param top The number of person groups to list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in
     *     response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of person groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<PersonGroup> list(String start, Integer top, Boolean returnRecognitionModel) {
        return this.serviceClient.list(start, top, returnRecognitionModel);
    }

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws APIErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void train(String personGroupId) {
        this.serviceClient.train(personGroupId);
    }
}
